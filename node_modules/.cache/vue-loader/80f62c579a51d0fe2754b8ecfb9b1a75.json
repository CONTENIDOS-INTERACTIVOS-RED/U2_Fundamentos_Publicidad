{"remainingRequest":"/home/runner/work/U2_Fundamentos_Publicidad/U2_Fundamentos_Publicidad/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Fundamentos_Publicidad/U2_Fundamentos_Publicidad/src/views/curso/Tema2.vue?vue&type=template&id=3ffd493e&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Fundamentos_Publicidad/U2_Fundamentos_Publicidad/src/views/curso/Tema2.vue","mtime":1736820990166},{"path":"/home/runner/work/U2_Fundamentos_Publicidad/U2_Fundamentos_Publicidad/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_Publicidad/U2_Fundamentos_Publicidad/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_Publicidad/U2_Fundamentos_Publicidad/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_Publicidad/U2_Fundamentos_Publicidad/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_Publicidad/U2_Fundamentos_Publicidad/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMi4gRWwgcHJvY2VzbyBjcmVhdGl2byBwdWJsaWNpdGFyaW86IGRlc2RlIGVsIDxlbT5icmllZmluZzwvZW0+IGhhc3RhIGxhIGVqZWN1Y2nDs24nIikKICAuY29udGFpbmVyLnRhcmpldGEudGFyamV0YS0tYmxhbmNhLnB4LTQucHgtbWQtNS5wdC00LnB0LW1kLTUub3ZlcmZsb3ctaGlkZGVuCgogICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNSBFbiBlc3RhIHByaW1lcmEgcGFydGUsIGNvbm9jZXJlbW9zIGxvcyBjb25jZXB0b3MgYsOhc2ljb3MgZGUgbGEgcHVibGljaWRhZCB5IHN1cyBwcmluY2lwYWxlcyBvYmpldGl2b3MuCgoKICAgICN0XzJfMS50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAyLjFdIEVsICNbZW0gYnJpZWZpbmddIHB1YmxpY2l0YXJpbwoKCiAgICAuYmctZnVsbC13aWR0aC5iZy1mb25kby01CiAgICAgIC5weC00LnB4LW1kLTUucGItbWQtMwogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1zdHJldGNoLm1iLTUKICAgICAgICAgIC5jb2wtbGctOAogICAgICAgICAgICAucHktNC5weC01LmJnLWNvbG9yLTMoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKS5oLTEwMAogICAgICAgICAgICAgIHVsLmxpc3RhLXVsCiAgICAgICAgICAgICAgICBsaS5tYi00CiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZQogICAgICAgICAgICAgICAgICB8IEVsICNbZW0gYnJpZWZdIG8gI1tlbSBicmllZmluZ10gcHVibGljaXRhcmlvLCBlcyBsYSBiYXNlIG8gcHVudG8gZGUgcGFydGlkYSBwYXJhIHVuYSBjYW1wYcOxYSBwdWJsaWNpdGFyaWEgeSBzZSB0cmFuc2Zvcm1hIGVuIGVsIHJlY3Vyc28gZGUgZGF0b3MgcHJlbGltaW5hcmVzIHBhcmEgcXVlIGVsIHB1YmxpY2lzdGEgeSBsb3MgY3JlYWRvcmVzIGRlIGxhIGNhbXBhw7FhLCBwdWVkYW4gZWxhYm9yYXIgZXN0cmF0ZWdpYXMgZGUgY29tdW5pY2FjacOzbiwgY29uY2VwdG9zIGNyZWF0aXZvcyB5IGxhIGVzdHJ1Y3R1cmEgZGUgdG9kb3MgbG9zIG1lbnNhamVzLiBQb3IgbG8gdGFudG8sIGNvbmZvcm1lIGFsIGZ1bmNpb25hbWllbnRvIGhhYml0dWFsIGRlIHVuIHByb2Nlc28gcHVibGljaXRhcmlvLCBsYSBlbXByZXNhIGRlYmUgbGxldmFyIGEgY2FibyBlbCAjW2VtIGJyaWVmXSB5LCBwdW50dWFsbWVudGUsIGVsIGRlcGFydGFtZW50byBkZSBtYXJrZXRpbmcsIHRyYXMgbGEgcmVjb3BpbGFjacOzbiBkZSB0b2RhIGxhIGluZm9ybWFjacOzbiBxdWUgc2Vyw6EgcHJvcG9yY2lvbmFkYSBhIGxvcyBleHBlcnRvcyBkZWwgc2VjdG9yLgogICAgICAgICAgICAgICAgbGkubWItMgogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUKICAgICAgICAgICAgICAgICAgfCBFbCBicmll76yBbmcgZXMgdW4gaW5mb3JtZSBxdWUgc2VsZWNjaW9uYSB5IG9yZGVuYSBsYSBpbmZvcm1hY2nDs24gZXN0cmF0w6lnaWNhLiBZIGVzdG8gc2lnbmlmaWNhIHF1ZSBlcyBtw6FzIHF1ZSB1biByZXN1bWVuIGluZm9ybWF0aXZvLCBxdWUgZGVudHJvIGRlbCBicmllZmluZyBlbmNvbnRyYXJlbW9zIHVuIGFuw6FsaXNpcyB5IGxhcyBpbnN0cnVjY2lvbmVzIHByZWNpc2FzIHF1ZSBzZSBkZWJlbiB0ZW5lciBlbiBjdWVudGEuCgogICAgICAgICAgLmNvbC1sZy00CiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzEucG5nIiwgYWx0PSIiLCBkYXRhLWFvcz0iem9vbS1pbiIpCgoKCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLXN0cmV0Y2gKICAgICAgICAgIC5jb2wtbGctMy5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkLTIuaC0xMDAKICAgICAgICAgICAgICBpbWcuY3VzdG9tLWltYWdlLWNhcmRfX2ltYWdlKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMi5wbmciIGFsdD0iIikKICAgICAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmRfX3RleHQucC00CiAgICAgICAgICAgICAgICBoNS5tYi0yLnRleHQtY2VudGVyIFByaW1lcm8KICAgICAgICAgICAgICAgIHAubWItMCBEZWJlIHNlciBjbGFybywgZsOhY2lsIGRlIGVudGVuZGVyIHBhcmEgdG9kb3MgbG9zIGludm9sdWNyYWRvcy4KICAgICAgICAgIC5jb2wtbGctMy5tYi00KGRhdGEtYW9zPSJ6b29tLWluLWRvd24iKQogICAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmQtMi5oLTEwMAogICAgICAgICAgICAgIGltZy5jdXN0b20taW1hZ2UtY2FyZF9faW1hZ2Uoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8zLnBuZyIgYWx0PSIiKQogICAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZF9fdGV4dC5wLTQKICAgICAgICAgICAgICAgIGg1Lm1iLTIudGV4dC1jZW50ZXIgU2VndW5kbwogICAgICAgICAgICAgICAgcC5tYi0wIERlYmVyIHNlciBjb25jaXNvLCBjb250ZW5lciDDum5pY2FtZW50ZSBsYSBpbmZvcm1hY2nDs24gcmVsZXZhbnRlLgogICAgICAgICAgLmNvbC1sZy0zLm1iLTQoZGF0YS1hb3M9Inpvb20taW4tZG93biIpCiAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZC0yLmgtMTAwCiAgICAgICAgICAgICAgaW1nLmN1c3RvbS1pbWFnZS1jYXJkX19pbWFnZShzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzQucG5nIiBhbHQ9IiIpCiAgICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkX190ZXh0LnAtNAogICAgICAgICAgICAgICAgaDUubWItMi50ZXh0LWNlbnRlciBUZXJjZXJvCiAgICAgICAgICAgICAgICBwLm1iLTAgRGViZSB0ZW5lciB1biBlbmZvcXVlIGNsYXJvLCBlcyBkZWNpciBjb24gb2JqZXRpdm9zIHByZWNpc29zIHkgYWxpbmVhZG9zIGNvbiBsYSBlc3RyYXRlZ2lhIGRlbCBjbGllbnRlLgogICAgICAgICAgLmNvbC1sZy0zLm1iLTQoZGF0YS1hb3M9Inpvb20taW4tZG93biIpCiAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZC0yLmgtMTAwCiAgICAgICAgICAgICAgaW1nLmN1c3RvbS1pbWFnZS1jYXJkX19pbWFnZShzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzUucG5nIiBhbHQ9IiIpCiAgICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkX190ZXh0LnAtNAogICAgICAgICAgICAgICAgaDUubWItMi50ZXh0LWNlbnRlciBDdWFydG8KICAgICAgICAgICAgICAgIHAubWItMCBEZWJlIHNlciBtb3RpdmFkb3IsIGluc3BpcmFkb3IsIGNyZWF0aXZvIHkgZ2VuZXJhZG9yIGRlIGlkZWFzLiAKCgogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItMS5tYi01CiAgICAgIC5weC00LnB4LW1kLTUucHktNAogICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvNi5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICBwLm1iLTAgRXMgYXPDrSBjb21vIGVsIGNsaWVudGUgZXMgZWwgcmVzcG9uc2FibGUgZGUgcHJlcGFyYXIgZWwgYnJpZWYgeSBsYSBhZ2VuY2lhIHB1YmxpY2l0YXJpYSwganVudG8gY29uIGVsIGRlcGFydGFtZW50byBkZSBtYXJrZXRpbmcgZGUgbGEgZW1wcmVzYSwgc29uIGxvcyBlbmNhcmdhZG9zIGRlIHJlY29waWxhciB0b2RhIGxhIGluZm9ybWFjacOzbiByZWxldmFudGUgcGFyYSBsYSBlamVjdWNpw7NuIGRlbCBtaXNtbywgdGFsZXMgY29tbzogZGF0b3Mgc29icmUgZWwgcHJvZHVjdG8sIGVsIHDDumJsaWNvIG9iamV0aXZvLCBlbCBtZXJjYWRvLCB5IGxvIHF1ZSBsYSBlbXByZXNhIHF1aWVyZSBsb2dyYXIuCgogICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNSBVbmEgdmV6IGxpc3RvIGxvIGFudGVyaW9yLCBjb21wYXJ0ZW4gZXN0YSBpbmZvcm1hY2nDs24gY29uIGxvcyBwdWJsaWNpc3RhcyB5IGNyZWF0aXZvcywgcXVpZW5lcyB1c2Fyw6FuIGVsIGJyaWVmIGNvbW8gYmFzZSBwYXJhIGRlc2Fycm9sbGFyIGxhIGNhbXBhw7FhIHksIGRlIGFjdWVyZG8gY29uIGVzdG8sIHNlIHNlbGVjY2lvbmEgZWwgdGlwbyBkZSBicmllZjogCgogICAgLmJnLWZ1bGwtd2lkdGguYmctZm9uZG8tc2xpZGVyLm1iLTUKICAgICAgLnAtNC5wLW1kLTUKICAgICAgICBTbHlkZXJBKHRpcG89ImIiKS5iZy13aGl0ZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNQogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvc2xpZGVyLTEucG5nIikKICAgICAgICAgICAgLmNvbC1sZy03CiAgICAgICAgICAgICAgaDUgQnJpZWYgZGUgcHJpbWVyIGNvbnRhY3RvCgogICAgICAgICAgICAgIHAgRXMgdW4gYnJpZWYgcXVlIHNlIHJlYWxpemEgY3VhbmRvIHVuIGNsaWVudGUgbyBlbXByZXNhIGNvbnRyYXRhIHBvciBwcmltZXJhIHZleiBhIHVuYSBhZ2VuY2lhIHB1YmxpY2l0YXJpYS4gU3UgZnVuY2nDs24gcHJpbmNpcGFsIGVzIGxhIGRlIHJlYWxpemFyIHVuIGRpYWduw7NzdGljbyBlc3RyYXTDqWdpY28sIHBlcm1pdGllbmRvIGEgcXVpZW4gdmEgYSBkZXNhcnJvbGxhciBsYXMgZXN0cmF0ZWdpYXMgZGUgY29tdW5pY2FjacOzbiwgY29ub2NlciBsYSBlbXByZXNhIGRlc2RlIGVsIGFuw6FsaXNpcyBkZWwgbWVyY2Fkby4gVGllbmUgdW4gZW5mb3F1ZSBnZW5lcmFsLCBlcyBkZWNpciBxdWUgcHJldGVuZGUgY29ub2NlciBtw6FzIGVsIGNsaWVudGUgbyBsYSBlbXByZXNhLCBxdWUgdW4gcHJvZHVjdG8gbyBzZXJ2aWNpbywgZW4gcGFydGljdWxhci4KCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNQogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvc2xpZGVyLTEucG5nIikKICAgICAgICAgICAgLmNvbC1sZy03CiAgICAgICAgICAgICAgaDUgQnJpZWYgdMOhY3RpY28KICAgICAgICAgICAgICBwIEVzdGUgdGlwbyBkZSBicmllZiB0aWVuZSBjb21vIG9iamV0aXZvIHByaW5jaXBhbCBlc3RhYmxlY2VyIGNsYXJhbWVudGUgbG9zIHJlc3VsdGFkb3MgZXNwZXJhZG9zIHkgZXN0YWJsZWNlciB1biBwbGFuIGVzdHJhdMOpZ2ljbyBkZSBjb211bmljYWNpw7NuLCBhbCBpbmRpY2FyIHF1ZSBlcyB1bmEgdMOhY3RpY2EsIGVzIHNvbG8gdW5hIHBhcnRlIGRlIHVuIHRvZG8sIGVzIGRlY2lyIHF1ZSBwYXJhIGltcGxlbWVudGFyIHVuIHBsYW4gbXVjaGFzIHZlY2VzLCBzZSByZXF1aWVyZSBtw6FzIGRlIHVuIGJyaWVmOyBhIGRpZmVyZW5jaWEgZGVsIGJyaWVmIGRlIHByaW1lciBjb250YWN0bywgc3UgZW5mb3F1ZSBlcyBlc3BlY8OtZmljbyBlbiB1biBwcm9kdWN0byBvIHNlcnZpY2lvLgoKICAgIFRhYnNDLmNvbG9yLWFjZW50by1jb250ZW5pZG8ubWItNQogICAgICAudGFicy1jb250ZW50LmJvcmRlci5weC00LnAtbWQtNS5weS0zKHRpdHVsbz0iQnJpZWYgZGUgcHJpbWVyIGNvbnRhY3RvIiA6aWNvbj0icmVxdWlyZSgnQC9hc3NldHMvYnVsbGV0cy9pY29uLXRhYi1jLTEuc3ZnJykiKQogICAgICAgIC5yb3cKICAgICAgICAgIC5jb2wtbWQtNi5jb2wtbGctNy5jb2wteGwtOC5tYi00Lm1iLW1kLTAub3JkZXItMgogICAgICAgICAgICBoNCBCcmllZiBkZSBwcmltZXIgY29udGFjdG8KCiAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIubWItNQogICAgICAgICAgICAgIC5jb2wtbGctNgogICAgICAgICAgICAgICAgdWwubGlzdGEtdWwKICAgICAgICAgICAgICAgICAgbGkKICAgICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjawogICAgICAgICAgICAgICAgICAgIHwgTm9tYnJlIGRlIGxhIGVtcHJlc2EuCiAgICAgICAgICAgICAgICAgIGxpCiAgICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sKICAgICAgICAgICAgICAgICAgICB8IE1pc2nDs24geSB2aXNpw7NuIGRlIGxhIGVtcHJlc2EuCiAgICAgICAgICAgICAgICAgIGxpCiAgICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sKICAgICAgICAgICAgICAgICAgICB8IE9iamV0aXZvIHByaW5jaXBhbCBkZSBsYSBlbXByZXNhLgogICAgICAgICAgICAgICAgICBsaQogICAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrCiAgICAgICAgICAgICAgICAgICAgfCBEaWZlcmVuY2lhY2nDs24gZGUgbGEgZW1wcmVzYS4KICAgICAgICAgICAgICAgICAgbGkKICAgICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjawogICAgICAgICAgICAgICAgICAgIHwgUHJvbWVzYXMgc2VjdW5kYXJpYXMuCiAgICAgICAgICAgICAgICAgIGxpCiAgICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sKICAgICAgICAgICAgICAgICAgICB8IE1lcmNhZG8gb2JqZXRpdm8uCiAgICAgICAgICAgICAgICAgIGxpCiAgICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sKICAgICAgICAgICAgICAgICAgICB8IFBvcnRhZm9saW8gZGUgcHJvZHVjdG9zIG8gc2VydmljaW9zLgogICAgICAgICAgICAgIC5jb2wtbGctNgogICAgICAgICAgICAgICAgdWwubGlzdGEtdWwKCiAgICAgICAgICAgICAgICAgIGxpCiAgICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sKICAgICAgICAgICAgICAgICAgICB8IEFudGVjZWRlbnRlcyBwdWJsaWNpdGFyaW9zLgogICAgICAgICAgICAgICAgICBsaQogICAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrCiAgICAgICAgICAgICAgICAgICAgfCBOZWNlc2lkYWRlcyBwdWJsaWNpdGFyaWFzLgogICAgICAgICAgICAgICAgICBsaQogICAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrCiAgICAgICAgICAgICAgICAgICAgfCBSZXN1bHRhZG9zIGVzcGVyYWRvcyBjb24gbGEgcHVibGljaWRhZC4KICAgICAgICAgICAgICAgICAgbGkKICAgICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjawogICAgICAgICAgICAgICAgICAgIHwgQ29tcGV0ZW5jaWEuCiAgICAgICAgICAgICAgICAgIGxpCiAgICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sKICAgICAgICAgICAgICAgICAgICB8IFBvbMOtdGljYXMgZGUgbGEgZW1wcmVzYS4KICAgICAgICAgICAgICAgICAgbGkKICAgICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjawogICAgICAgICAgICAgICAgICAgIHwgUG9zaWNpb25hbWllbnRvLgogICAgICAgICAgICAgICAgICBsaQogICAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrCiAgICAgICAgICAgICAgICAgICAgfCBDb250YWN0by4KICAgICAgICAKICAgICAgICAgIC5jb2wtbWQtNi5jb2wtbGctNS5jb2wteGwtNC5vcmRlci0xCiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvdGFiLTEucG5nIiwgYWx0PSIiKS5tYi00CgogICAgICAudGFicy1jb250ZW50LmJvcmRlci5weC00LnAtbWQtNS5weS0zKHRpdHVsbz0iQnJpZWYgdMOhY3RpY28iIDppY29uPSJyZXF1aXJlKCdAL2Fzc2V0cy9idWxsZXRzL2ljb24tdGFiLWMtMi5zdmcnKSIpCiAgICAgICAgLnJvdwogICAgICAgICAgLmNvbC1tZC02LmNvbC1sZy03LmNvbC14bC04Lm1iLTQubWItbWQtMC5vcmRlci0yCiAgICAgICAgICAgIGg0IEJyaWVmIHTDoWN0aWNvCiAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi01CiAgICAgICAgICAgICAgLmNvbC1sZy02CiAgICAgICAgICAgICAgICB1bC5saXN0YS11bAogICAgICAgICAgICAgICAgICBsaQogICAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrCiAgICAgICAgICAgICAgICAgICAgfCBJZGVudGlmaWNhY2nDs24gZGUgbGEgY2FtcGHDsWEuCiAgICAgICAgICAgICAgICAgIGxpCiAgICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sKICAgICAgICAgICAgICAgICAgICB8IE5lY2VzaWRhZCBkZSBsYSBtYXJjYS4KICAgICAgICAgICAgICAgICAgbGkKICAgICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjawogICAgICAgICAgICAgICAgICAgIHwgT2JqZXRpdm9zIGRlIGxhIGNhbXBhw7FhLgogICAgICAgICAgICAgICAgICBsaQogICAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrCiAgICAgICAgICAgICAgICAgICAgfCBNZXJjYWRvIG9iamV0aXZvLgogICAgICAgICAgICAgICAgICBsaQogICAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrCiAgICAgICAgICAgICAgICAgICAgfCBUYXJnZXQgY29tdW5pY2FjaW9uYWwuCiAgICAgICAgICAgICAgLmNvbC1sZy02CiAgICAgICAgICAgICAgICB1bC5saXN0YS11bAogICAgICAgICAgICAgICAgICBsaQogICAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrCiAgICAgICAgICAgICAgICAgICAgfCBNZW5zYWplIGEgY29tdW5pY2FyLgogICAgICAgICAgICAgICAgICBsaQogICAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrCiAgICAgICAgICAgICAgICAgICAgfCBQaWV6YXMgYSBkZXNhcnJvbGxhciB5IGd1w61hcyBkZSBlamVjdWNpw7NuLgogICAgICAgICAgICAgICAgICBsaQogICAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrCiAgICAgICAgICAgICAgICAgICAgfCBDcm9ub2dyYW1hIGRlIGFjdGl2aWRhZGVzIGEgZGVzYXJyb2xsYXIuCiAgICAgICAgICAgICAgICAgIGxpCiAgICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2sKICAgICAgICAgICAgICAgICAgICB8IEFzcGVjdG9zIHTDqWNuaWNvcyB5IGxlZ2FsZXMuCiAgICAgICAgCiAgICAgICAgICAuY29sLW1kLTYuY29sLWxnLTUuY29sLXhsLTQub3JkZXItMQogICAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyL3RhYi0yLnBuZyIsIGFsdD0iIikubWItNAoKICAgICN0XzJfMi50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAyLjJdIERlc2Fycm9sbG8gZGVsIGNvbmNlcHRvIGNyZWF0aXZvCiAgICAKICAgIC5yb3cubWItNQogICAgICAuY29sLWxnLTgKICAgICAgICAuYmctY29sb3ItMi5wLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTQKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzcuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgIHAubWItMCBFbCBjb25jZXB0byBjcmVhdGl2byBlcyBsYSBpZGVhIGNlbnRyYWwgcXVlIGRhIGNvaGVyZW5jaWEgeSBkaXJlY2Npw7NuIGEgdG9kYSBsYSBjYW1wYcOxYS4gU2Vnw7puIENvbGwgUnViaW8gJiBNaWPDsyBTYW56ICgyMDE4KSwgdW4gYnVlbiBjb25jZXB0byBjcmVhdGl2byBkZWJlIHNlciBjbGFybywgbWVtb3JhYmxlIHkgY2FwYXogZGUgY29uZWN0YXIgZW1vY2lvbmFsbWVudGUgY29uIGVsIHDDumJsaWNvLgoKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBFbCBwcmltZXIgbW9kZWxvIHNvYnJlIGVsIHByb2Nlc28gY3JlYXRpdm8sIGZ1ZSBwbGFudGVhZG8gZW4gMTkxMCBwb3IgSm9obiBEZXdleSwgeSBzZSBiYXNhYmEgZW4gY2luY28gZXRhcGFzOiAKCiAgICAgIC5jb2wtbGctNAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvOC5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCgoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWZvbmRvLTIubWItNQogICAgICAucHgtbGctNS5wdC01LnB0LWxnLTAKCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgoKICAgICAgICAgIC5jb2wtbGctNihkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgICAgLnBzLTUucHMtbGctMAogICAgICAgICAgICAgIHAubWItMSAjW3N0cm9uZyBFdGFwYSAxXQlFbmN1ZW50cm8gY29uIGxhIGRpZmljdWx0YWQgbyBwcm9ibGVtYS4gCiAgICAgICAgICAgICAgcC5tYi0xICNbc3Ryb25nIEV0YXBhIDJdCUxvY2FsaXphY2nDs24geSBkZWZpbmljacOzbiBkZWwgcHJvYmxlbWEuIAogICAgICAgICAgICAgIHAubWItMSAjW3N0cm9uZyBFdGFwYSAzXQlQbGFudGVhbWllbnRvIGRlIHBvc2libGVzIHNvbHVjaW9uZXMuIAogICAgICAgICAgICAgIHAubWItMSAjW3N0cm9uZyBFdGFwYSA0XQlEZXNhcnJvbGxvIGRlIGxhcyBzb2x1Y2lvbmVzIHkgYW7DoWxpc2lzIGRlIGxhcyBjb25zZWN1ZW5jaWFzLiAKICAgICAgICAgICAgICBwLm1iLTEgI1tzdHJvbmcgRXRhcGEgNV0JQWNlcHRhY2nDs24gZGUgbGEgc29sdWNpw7NuIHByb3B1ZXN0YS4KCgogICAgICAgICAgLmNvbC1sZy00KGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgaW1nLmltZy1mbHVpZChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzkuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDoyOTVweCIsIGFsdD0iIikubXgtYXV0by5teC1sZy0wLm1zLWxnLWF1dG8ubXQtNC5tdC1sZy0wCgogICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgRXMgYXPDrSBjb21vLCBkZXNkZSBkaWZlcmVudGVzIGF1dG9yZXMsIHNlIGhhIGNvbmNsdWlkbyBxdWUgbGEgY3JlYXRpdmlkYWQgcGFydGUgZGUgdW4gcHJvYmxlbWEsIHBhcmEgcG9kZXJsZSBkYXIgc29sdWNpw7NuIGFsIG1pc21vOyBHdXRpw6lycmV6IENvbG1lbmVyICgyMDE0KSwgcmVsYWNpb25hIHF1ZSwgY29uIHJlbGFjacOzbiBhIGxhIGVtcHJlc2EsIGxhcyDDoXJlYXMgcXVlIHNlIGRlYmVuIGV4cGxvcmFyIHBhcmEgaWRlbnRpZmljYXIgcHJvYmxlbWFzLCBzb246IAoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWZvbmRvLTYKICAgICAgLnB4LTQucHgtbWQtNS5weS01CiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTUKCiAgICAgICAgICAuY29sLWxnLTQKICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMTAucG5nIiwgYWx0PSIiKS5teC1hdXRvCgogICAgICAgICAgLmNvbC1sZy04CgogICAgICAgICAgICBTbHlkZXJGKGNvbHVtbmFzPSJjb2wtMTIgY29sLWxnLTYiKQogICAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5wLTQuaC0xMDAuc2hhZG93LWFwcAogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMTEuc3ZnIiBhbHQ9IkF2YXRhclRvcCIgLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0by5tYi0zCiAgICAgICAgICAgICAgICBoNC50ZXh0LWNlbnRlci5tYi00IExhIGVzdHJhdGVnaWEKICAgICAgICAgICAgICAgIHAudGV4dC1jZW50ZXIgSWRlbnRpZmljYXIgc3VjZXNvcyBxdWUgaGFuIGFudWxhZG8gbGFzIHZlbnRhamFzIGNvbXBldGl0aXZhcywgc29icmUgbGFzIHF1ZSBzZSBhc2VudGFiYSBlbCBuZWdvY2lvLgogICAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5wLTQuaC0xMDAuc2hhZG93LWFwcAogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMTIuc3ZnIiBhbHQ9IkF2YXRhclRvcCIgLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0by5tYi0zCiAgICAgICAgICAgICAgICBoNC50ZXh0LWNlbnRlci5tYi00IEVsIHByZWNpbwogICAgICAgICAgICAgICAgcC50ZXh0LWNlbnRlciBWYWxvciBtb25ldGFyaW8gcXVlIHNlIGxlIGRhIGFsIHByb2R1Y3RvIG8gc2VydmljaW8uCiAgICAgICAgICAgICAgLmJnLWNvbG9yLXdoaXRlLnAtNC5oLTEwMC5zaGFkb3ctYXBwCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xMy5zdmciIGFsdD0iQXZhdGFyVG9wIiAsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvLm1iLTMKICAgICAgICAgICAgICAgIGg0LnRleHQtY2VudGVyLm1iLTQgRWwgbWVyY2FkbwogICAgICAgICAgICAgICAgcC50ZXh0LWNlbnRlciBTdWVsZW4gc2VyIG11eSBkaW7DoW1pY29zLiBTdSBlc3RydWN0dXJhLCBzdXMgY29tcG9uZW50ZXMsIHN1cyBwcmVjaW9zLCB2YXLDrWFuIGNvbnN0YW50ZW1lbnRlLgogICAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5wLTQuaC0xMDAuc2hhZG93LWFwcAogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMTQuc3ZnIiBhbHQ9IkF2YXRhclRvcCIgLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0by5tYi0zCiAgICAgICAgICAgICAgICBoNC50ZXh0LWNlbnRlci5tYi00IEVsIHByb2R1Y3RvCiAgICAgICAgICAgICAgICBwLnRleHQtY2VudGVyIExvcyBwcm9kdWN0b3MgdGllbmVuIHVuIGNpY2xvIGRlIHZpZGEsIGxvIGN1YWwgcXVpZXJlIGRlY2lyIHF1ZSwgZW4gYWxnw7puIG1vbWVudG8sIGNvbWllbnphbiBhIGVudmVqZWNlci4KICAgICAgICAgICAgICAuYmctY29sb3Itd2hpdGUucC00LmgtMTAwLnNoYWRvdy1hcHAKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzE1LnN2ZyIgYWx0PSJBdmF0YXJUb3AiICwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8ubWItMwogICAgICAgICAgICAgICAgaDQudGV4dC1jZW50ZXIubWItNCBMYSBvcmdhbml6YWNpw7NuCiAgICAgICAgICAgICAgICBwLnRleHQtY2VudGVyIERldGVjdGFyIGxvcyBwcm9ibGVtYXMgcXVlIGFmZWN0YW4gYSBsYXMgb3JnYW5pemFjaW9uZXMuCiAgICAgICAgICAgICAgLmJnLWNvbG9yLXdoaXRlLnAtNC5oLTEwMC5zaGFkb3ctYXBwCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xNi5zdmciIGFsdD0iQXZhdGFyVG9wIiAsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvLm1iLTMKICAgICAgICAgICAgICAgIGg0LnRleHQtY2VudGVyLm1iLTQgTG9zIHByb2Nlc29zIGRlIGdlc3Rpw7NuCiAgICAgICAgICAgICAgICBwLnRleHQtY2VudGVyIEVzdGFyIGFsIGTDrWEgZGUgbGFzIHBvc2libGVzIG1lam9yYXMgZGUgZGljaG9zIHByb2Nlc29zLgoKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBQYXJhIGVsIGRlc2Fycm9sbG8gZGVsIGNvbmNlcHRvIGNyZWF0aXZvLCBsb3MgZXF1aXBvcyBkZWJlbiBkZXRlY3RhciB5IHByZXZlciBsb3MgcHJvYmxlbWFzIHBhcmEgdHJhYmFqYXIgeSBhZnJvbnRhcmxvcyBkZXNkZSB1biBjb25jZXB0byBjcmVhdGl2bzsgcGFyYSBlc3RvIHB1ZWRlbiB1dGlsaXphciBkaXZlcnNhcyBtZXRvZG9sb2fDrWFzIHF1ZSBmb21lbnRhbiBsYSBpbm5vdmFjacOzbi4gR3VpbGVyYSB5IEdhcnJlbGwgKDIwMjEpLCBwcmVzZW50YW4gZGl2ZXJzYXMgdMOpY25pY2FzIHBhcmEgZm9tZW50YXIgbGEgY3JlYXRpdmlkYWQgZW4gZWwgZGVzYXJyb2xsbyBkZSBwcm9kdWN0b3MgeSBzZXJ2aWNpb3MsIGVudHJlIGxhcyBjdWFsZXMgc2UgcHVlZGVuIGVudW5jaWFyOiAKCgogICAgLmJnLWZ1bGwtd2lkdGguYmctZm9uZG8tc2xpZGVyLm1iLTUKICAgICAgLnAtNC5wLW1kLTUKICAgICAgICBTbHlkZXJBKHRpcG89ImIiKS5iZy13aGl0ZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNQogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvc2xpZGVyLTEtMi5wbmciKQogICAgICAgICAgICAuY29sLWxnLTcKICAgICAgICAgICAgICBoNSBCcmFpbnN0b3JtaW5nCgogICAgICAgICAgICAgIHAgUmV1bmlvbmVzIGRvbmRlIGxvcyBwYXJ0aWNpcGFudGVzIGdlbmVyYW4gaWRlYXMsIGxpYnJlbWVudGUsIHNvYnJlIHVuIHRlbWEgbyBwcm9ibGVtYSwgc2luIGNyw610aWNhcyBuaSBldmFsdWFjaW9uZXMgaW5tZWRpYXRhcywgcGFyYSBmb21lbnRhciBsYSBjcmVhdGl2aWRhZCBjb2xlY3RpdmEsIGEgdHJhdsOpcyBkZSBsbHV2aWEgZGUgaWRlYXMuCgogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyL3NsaWRlci0yLTIucG5nIikKICAgICAgICAgICAgLmNvbC1sZy03CiAgICAgICAgICAgICAgaDUgTWFwYXMgbWVudGFsZXMKICAgICAgICAgICAgICBwIERpYWdyYW1hcyBxdWUgcmVwcmVzZW50YW4gaWRlYXMsIGNvbmNlcHRvcyB5IHN1cyBpbnRlcnJlbGFjaW9uZXMsIGZhY2lsaXRhbmRvIGxhIG9yZ2FuaXphY2nDs24geSBnZW5lcmFjacOzbiBkZSBudWV2YXMgaWRlYXMuCgogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyL3NsaWRlci0zLTIucG5nIikKICAgICAgICAgICAgLmNvbC1sZy03CiAgICAgICAgICAgICAgaDUgU0NBTVBFUgogICAgICAgICAgICAgIHAgVW5hIHTDqWNuaWNhIHF1ZSBpbnZpdGEgYSBtb2RpZmljYXIgaWRlYXMgZXhpc3RlbnRlcywgbWVkaWFudGUgYWNjaW9uZXMgY29tbyBTdXN0aXR1aXIsIENvbWJpbmFyLCBBZGFwdGFyLCBNb2RpZmljYXIsIFBvbmVyIGVuIG90cm9zIHVzb3MsIEVsaW1pbmFyIHkgUmVvcmdhbml6YXIuCgogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyL3NsaWRlci00LTIucG5nIikKICAgICAgICAgICAgLmNvbC1sZy03CiAgICAgICAgICAgICAgaDUgUGVuc2FtaWVudG8gbGF0ZXJhbAogICAgICAgICAgICAgIHAgTcOpdG9kbyBxdWUgYnVzY2EgcmVzb2x2ZXIgcHJvYmxlbWFzIG1lZGlhbnRlIGVuZm9xdWVzIGluZGlyZWN0b3MgeSBjcmVhdGl2b3MsIGFsZWrDoW5kb3NlIGRlIHBhdHJvbmVzIGRlIHBlbnNhbWllbnRvIHRyYWRpY2lvbmFsZXMuCgogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyL3NsaWRlci01LTIucG5nIikKICAgICAgICAgICAgLmNvbC1sZy03CiAgICAgICAgICAgICAgaDUgU2VpcyBzb21icmVyb3MgcGFyYSBwZW5zYXIKICAgICAgICAgICAgICBwIFByb3B1ZXN0YSBkZSBFZHdhcmQgZGUgQm9ubyBxdWUgYXNpZ25hIGRpZmVyZW50ZXMgcGVyc3BlY3RpdmFzIChlbW9jaW9uYWwsIGluZm9ybWF0aXZhLCBjcmVhdGl2YSwgZXRjLikgbyAic29tYnJlcm9zIiBpbWFnaW5hcmlvcywgYXl1ZGFuZG8gYSBhbmFsaXphciBwcm9ibGVtYXMgZGVzZGUgbcO6bHRpcGxlcyDDoW5ndWxvcy4KCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNQogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvc2xpZGVyLTYtMi5wbmciKQogICAgICAgICAgICAuY29sLWxnLTcKICAgICAgICAgICAgICBoNSBBbmFsb2fDrWFzIHkgbWV0w6Fmb3JhcwogICAgICAgICAgICAgIHAgVXNvIGRlIGNvbXBhcmFjaW9uZXMgcGFyYSB0cmFzbGFkYXIgc29sdWNpb25lcyBkZSB1biBjb250ZXh0byBhIG90cm8sIGZhY2lsaXRhbmRvIGxhIGdlbmVyYWNpw7NuIGRlIGlkZWFzIGlubm92YWRvcmFzLgoKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLnAtNC5wLW1kLTUKICAgICAgICAgICAgLmNvbC1sZy01CiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi9zbGlkZXItNy0yLnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNwogICAgICAgICAgICAgIGg1IFTDqWNuaWNhcyBkZSBpbnZlcnNpw7NuCiAgICAgICAgICAgICAgcCBDb25zaXN0ZSBlbiBpbnZlcnRpciBzdXB1ZXN0b3MgbyBwbGFudGVhbWllbnRvcywgcGFyYSBleHBsb3JhciBudWV2YXMgcG9zaWJpbGlkYWRlcyB5IHNvbHVjaW9uZXMuCiAgICAKICAgIAogICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgRXN0YXMgdMOpY25pY2FzLCBlbnRyZSBvdHJhcywgc29uIGZ1bmRhbWVudGFsZXMgcGFyYSBpbXB1bHNhciBsYSBpbm5vdmFjacOzbiB5IGxhIGNyZWF0aXZpZGFkIGVuIGVsIGRlc2Fycm9sbG8gZGUgcHJvZHVjdG9zIHkgc2VydmljaW9zIGludGVsaWdlbnRlcyB5IHNvc3RlbmlibGVzLmNuaWNhcyBwYXJhIGZvbWVudGFyIGxhIGNyZWF0aXZpZGFkIGVuIGVsIGRlc2Fycm9sbG8gZGUgcHJvZHVjdG9zIHkgc2VydmljaW9zLCBlbnRyZSBsYXMgY3VhbGVzIHNlIHB1ZWRlbiBlbnVuY2lhcjogCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLXN0cmV0Y2gubWItNQogICAgICAuY29sLWxnLTgKICAgICAgICAucHktNC5weC01LmJnLWNvbG9yLTMoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKS5oLTEwMAogICAgICAgICAgcC5tYi00IENvbGwgUnViaW8sIFAuICYgTWljw7MgU2FueiwgSi4gTC4gKDIwMTgpLCBlbiBzdSBsaWJybyBFc3RyYXRlZ2lhcyBkZSBwdWJsaWNpZGFkIHkgcmVsYWNpb25lcyBww7pibGljYXMgZW4gbGEgZXJhIGRpZ2l0YWwsIGRlc2Fycm9sbGFuIGVsIGVqZW1wbG8gY2xhcm8gZGUgY29uY2VwdG8gY3JlYXRpdm8gZGUgRm90b2Nhc2E6IOKAnHBvcnRhbCBpbm1vYmlsaWFyaW8gcXVlIG5hY2nDsyBlbiBlbCAyMDA0LCBkZSBsYSBmdXNpw7NuIGRlIGRvcyBwb3J0YWxlcywgQW51bnRpcyB5IFZpdmVuZHVtLiBBY3R1YWxtZW50ZSwgcGVydGVuZWNlIGEgU2NoaWJzdGVkIFNwYWluLCBjb21wYcOxw61hIGRlIGFudW5jaW9zIGNsYXNpZmljYWRvcyB5IG9mZXJ0YXMgZGUgZW1wbGVvIG3DoXMgZ3JhbmRlIHkgZGl2ZXJzaWZpY2FkYSBkZSBFc3Bhw7FhLCBxdWUgY3VlbnRhIGNvbiBvdHJvcyBwb3J0YWxlcyBjb21vIEluZm9Kb2JzLCBWaWJibywgQ29jaGVzLm5ldCB5IE1pbGFudW5jaW9zLCB5IHF1ZSBmb3JtYSBwYXJ0ZSBkZSBsYSBtdWx0aW5hY2lvbmFsIG5vcnVlZ2EgU2NoaWJzdGVkIE1lZGlhIEdyb3VwLCBwcmVzZW50ZSBlbiBtw6FzIGRlIDMwIHBhw61zZXMsIGRvbmRlIHRyYWJhamFuIDYuODAwIGVtcGxlYWRvcy4gRWwgcG9ydGFsIGRlIEZvdG9jYXNhIHJlY2liZSBtw6FzIGRlIHVuIG1pbGzDs24gZGUgdmlzaXRhcyBtZW5zdWFsZXM7IGVsIGVxdWlwbyBkZSBtYXJrZXRpbmcgZXN0w6EgY29uZm9ybWFkbyBwb3IgdW4gZ3J1cG8gZGUgcHJvZmVzaW9uYWxlcyBzZW5pb3IgaW50ZXJub3MsIGxpZGVyYWRvcyBwb3IgTW9udHNlIExhdmlsbGEsIHF1ZSBlc3TDoW4gYWwgZnJlbnRlIGRlIMOhcmVhcyBjb21vIGVsIGRpc2XDsW8sIGxhIGNvbXVuaWNhY2nDs24sIGxhcyByZWRlcyBzb2NpYWxlcyBvIGxhIHB1YmxpY2lkYWQgcGFyYSBwbGFuaWZpY2FyIHkgY29vcmRpbmFyIGxhcyBhY2Npb25lcyBkZSBjb211bmljYWNpw7Nu4oCdLiAKCiAgICAgICAgICBhLmFuZXhvLm1iLTQuYmctd2hpdGUudy1maXQoaHJlZj0iaHR0cHM6Ly93d3cuZm90b2Nhc2EuZXMvZXMvcXVpZW5lcy1zb21vcy8iIHRhcmdldD0iX2JsYW5rIikKICAgICAgICAgICAgLmFuZXhvX19pY29ubyg6c3R5bGU9InsnYmFja2dyb3VuZC1jb2xvcic6ICcjREJFN0ZDJ30iKQogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL3RlbXBsYXRlL2ljb25vLWxpbmsuc3ZnIikKICAgICAgICAgICAgLmFuZXhvX190ZXh0bwogICAgICAgICAgICAgIHAgPHN0cm9uZz5TaXRpbyB3ZWIuIDwvc3Ryb25nPiBGb3RvY2FzYQoKICAgICAgLmNvbC1sZy00CiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xNy5wbmciLCBhbHQ9IiIsIGRhdGEtYW9zPSJ6b29tLWluIikKCgogICAgI3RfMl8zLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDIuM10gUHJvZHVjY2nDs24geSBlamVjdWNpw7NuIAoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTIKICAgICAgLnB4LTQucC1tZC01CiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgLmNvbC1sZy00CiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMTgucG5nIiwgYWx0PSIiKQogICAgICAgICAgLmNvbC1sZy04CiAgICAgICAgICAgIGgyLm1iLTQoZGF0YS1hb3M9ImZsaXAtdXAiKSBQcm9kdWNjacOzbiB5IGVqZWN1Y2nDs24gCgogICAgICAgICAgICBwLm1iLTQoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKSBFbiBlbCBQREYgUHJvZHVjY2nDs24geSBlamVjdWNpw7NuLCBzZSBkZXRhbGxhbiBsYXMgZmFzZXMgY2xhdmUgZGUgZXN0ZSBwcm9jZXNvLCBkZXNkZSBsYSBwbGFuaWZpY2FjacOzbiBkZSByZWN1cnNvcyB5IGxhIGNyZWFjacOzbiBkZSBjb250ZW5pZG8gaGFzdGEgbGEgZWRpY2nDs24gZmluYWwgeSB2YWxpZGFjacOzbiBkZSBtYXRlcmlhbGVzLiBBZGVtw6FzLCBzZSBhbmFsaXphbiBsb3Mgcm9sZXMgZGUgbG9zIGRlcGFydGFtZW50b3MgY3JlYXRpdm9zLCB0w6ljbmljb3MgeSBsb2fDrXN0aWNvcywgZGVzdGFjYW5kbyBsYSBpbXBvcnRhbmNpYSBkZSBsYSBjb2xhYm9yYWNpw7NuIGludGVyZGlzY2lwbGluYXJpYSBwYXJhIG1hbnRlbmVyIGxhIGNvaGVyZW5jaWEgeSBjYWxpZGFkIGVuIGNhZGEgZXRhcGEuCgogICAgICAgICAgICBhLmFuZXhvLm1iLTQuYmctd2hpdGUudy1maXQoOmhyZWY9Im9idGVuZXJMaW5rKCcvZG93bmxvYWRzL0FuZXhvXzEucGRmJykiIHRhcmdldD0iX2JsYW5rIikoZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICAgICAgICAgIC5hbmV4b19faWNvbm8oOnN0eWxlPSJ7J2JhY2tncm91bmQtY29sb3InOiAnI0ZDREZEQid9IikKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL3RlbXBsYXRlL2ljb25vLXBkZi5zdmciKQogICAgICAgICAgICAgIC5hbmV4b19fdGV4dG8KICAgICAgICAgICAgICAgIHAgPHN0cm9uZz5BbmV4by4gPC9zdHJvbmc+IFByb2R1Y2Npw7NuIHkgZWplY3VjacOzbiAKCgogICAgLy9lbVBJRVpBIEFRVUkKICAgIC5iZy1mdWxsLXdpZHRoLmJvcmRlci10b3AuY29sb3ItcHJpbWFyaW8KICAgICAgLnAtNC5wLW1kLTUKICAgICAgICBoMihkYXRhLWFvcz0iZmFkZS1sZWZ0IikgTUFURVJJQUwgQ09NUExFTUVOVEFSSU8KICAgICAgICAucm93Lm1hdGVyaWFsLWNvbXBsZW1lbnRhcmlvCiAgICAgICAgICAuY29sLTEyLmNvbC1tZC02LmNvbC1sZy03CiAgICAgICAgICAgIHAgTG9zIGludml0YW1vcyBhIGV4cGxvcmFyIGVsIG1hdGVyaWFsIGNvbXBsZW1lbnRhcmlvIGRlIGVzdGUgY3Vyc28sIGVuIGVzdGEgc2VjY2nDs24gZW5jb250cmFyw6EgcmVjdXJzb3MgcXVlIGxlIHBlcm1pdGlyw6FuIHByb2Z1bmRpemFyICB5IGVucmlxdWVjZXIgc3UgYXByZW5kaXphamUgZW4gbG9zIHRlbWFzIHRyYXRhZG9zIGVuIGVzdGEgdW5pZGFkLgoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly9lbGlicm8ubmV0L2VzL2VyZWFkZXIvdGVjbm9sb2dpY2FkZWxvcmllbnRlLzU4NTIzP3BhZ2U9MjQiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSDCv0PDs21vIGRlc2Fycm9sbGFyIGlkZWFzIHB1YmxpY2l0YXJpYXMgY3JlYXRpdmFzPyBFZGl0b3JpYWwgVU9DLgoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly9lbGlicm8ubmV0L2VzL2VyZWFkZXIvdGVjbm9sb2dpY2FkZWxvcmllbnRlLzE3Mjk2NT9wYWdlPTI4IiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgR3VpbGVyYSwgTC4gJiBHYXJyZWxsLCBBLiAoMjAyMSkuIFByb2R1Y3RvcyB5IHNlcnZpY2lvcyBpbnRlbGlnZW50ZXMgeSBzb3N0ZW5pYmxlczogdMOpY25pY2FzIHBhcmEgbGEgaW5ub3ZhY2nDs24geSBsYSBjcmVhdGl2aWRhZC4gTWFyZ2UgQm9va3MuCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby15dC5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1STWd4VW4zZHAtWSIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIERvbiBTY3JhcHAgfCBBcHJlbmRpemFqZSBDcmVhdGl2by4gKDIwMjApLiBDw5NNTyBIQUNFUiBVTiBCUklFRiB4IEphZWwgUHJlY2lhdCBQVDEgQCBERSBDRVJPIEEgTklOSkEKCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ljb25vLXl0LnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVBtMjk4RzVRQ01VIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgRWwgQmxvZyBEZSBSYWZmby4gKDIwMjApLiBCcmllZiB5IFRpcG9zIGRlIEJyaWVmIAogICAgICAgICAgICAgIAogICAgICAgICAgLmNvbC0xMi5jb2wtbWQtNi5jb2wtbGctMy5vZmZzZXQtbGctMQogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9tYXRlcmlhbC1jb21wbGVtZW50YXJpby5zdmcnLCBhbHQ9JycpCg=="},null]}