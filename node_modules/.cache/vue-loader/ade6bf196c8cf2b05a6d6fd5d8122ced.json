{"remainingRequest":"/home/runner/work/U2_Fundamentos_Publicidad/U2_Fundamentos_Publicidad/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Fundamentos_Publicidad/U2_Fundamentos_Publicidad/src/views/curso/Tema3.vue?vue&type=template&id=5ee37d2d&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Fundamentos_Publicidad/U2_Fundamentos_Publicidad/src/views/curso/Tema3.vue","mtime":1736820990166},{"path":"/home/runner/work/U2_Fundamentos_Publicidad/U2_Fundamentos_Publicidad/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_Publicidad/U2_Fundamentos_Publicidad/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_Publicidad/U2_Fundamentos_Publicidad/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_Publicidad/U2_Fundamentos_Publicidad/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_Publicidad/U2_Fundamentos_Publicidad/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMy4gUGxhbmlmaWNhY2nDs24gZXN0cmF0w6lnaWNhIHkgbWVkaW9zIGVuIHB1YmxpY2lkYWQnIikKICAuY29udGFpbmVyLnRhcmpldGEudGFyamV0YS0tYmxhbmNhLnB4LTQucHgtbWQtNS5wdC00LnB0LW1kLTUub3ZlcmZsb3ctaGlkZGVuCgogICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNSBBIGNvbnRpbnVhY2nDs24sIGVzdHVkaWFyZW1vcyBsb3MgZWxlbWVudG9zIGVuIGxhIHBsYW5pZmljYWNpw7NuIGVzdHJhdMOpZ2ljYSB5IGxvcyBtZWRpb3MgZGUgcHVibGljaWRhZC4KCgogICAgI3RfM18xLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDMuMV0gRGVmaW5pY2nDs24gZGUgb2JqZXRpdm9zIHkgc2VnbWVudGFjacOzbgoKCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy04CiAgICAgICAgLmJnLWNvbG9yLTEucHgtNC5weS01KGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi00CiAgICAgICAgICBwLm1iLTAgU2Vnw7puIE1lZGluYSAoMjAxNiksIGxvcyBvYmpldGl2b3MgcHVibGljaXRhcmlvcyBlc3RhYmxlY2VuIHF1w6kgc2UgcXVpZXJlIGxvZ3JhciBjb24gdW5hIGNhbXBhw7FhLCBzaXJ2aWVuZG8gY29tbyBndcOtYSBwYXJhIGVsIGRlc2Fycm9sbG8gZGUgZXN0cmF0ZWdpYXMgeSB0w6FjdGljYXMuCiAgICAgICAgCiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgTG9zIG9iamV0aXZvcywgYWRlbcOhcywgc29uIHVuYSBtZXRvZG9sb2fDrWEgcGFyYSBlc3RhYmxlY2VyIG1ldGFzIGNsYXJhcyB5IGFsY2FuemFibGVzOyB1biBlamVtcGxvIGRlIGVzdGEgbWV0b2RvbG9nw61hIHNvbiBsb3Mgb2JqZXRpdm9zIFNNQVJULCBsb3MgY3VhbGVzIGVzdGFibGVjZW4gcXVlIGRlYmVuIHNlcjogCiAgICAgIC5jb2wtbGctNC5kLW5vbmUuZC1zbS1ibG9jawogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvMS5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpLm1iLTQubWItbGctMAogICAgCiAgICAuYmctZnVsbC13aWR0aC5iZy1mb25kby03Lm1iLTUKICAgICAgLnB4LWxnLTUucHgtNC5weS01LnB5LWxnLTAKCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgoKICAgICAgICAgIC5jb2wtbGctNy5vcmRlci0yKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgICAucHMtNS5wcy1sZy0wCiAgICAgICAgICAgICAgcC5tYi0xIDxiPkVzcGVjw61maWNvcyAoPGVtPlNwZWNpZmljPC9lbT4pPC9iPi4gQ2xhcm9zIHkgZGV0YWxsYWRvcy4KICAgICAgICAgICAgICBwLm1iLTEgPGI+TWVkaWJsZXMgKDxlbT5NZWFzdXJhYmxlPC9lbT4pPC9iPi4JQ3VhbnRpZmljYWJsZXMgcGFyYSBldmFsdWFyIGVsIMOpeGl0by4KICAgICAgICAgICAgICBwLm1iLTEgPGI+QWxjYW56YWJsZXMgKDxlbT5BY2hpZXZhYmxlPC9lbT4pPC9iPi4JUmVhbGlzdGFzLCBzZWfDum4gbG9zIHJlY3Vyc29zIGRpc3BvbmlibGVzLgogICAgICAgICAgICAgIHAubWItMSA8Yj5SZWxldmFudGVzICg8ZW0+UmVsZXZhbnQ8L2VtPik8L2I+LglSZWxhY2lvbmFkb3MgY29uIGxhcyBtZXRhcyBkZWwgbmVnb2Npby4KICAgICAgICAgICAgICBwLm1iLTEgPGI+VGVtcG9yYWxlcyAoPGVtPlRpbWUtYm91bmQ8L2VtPik8L2I+LglDb24gdW4gbWFyY28gZGUgdGllbXBvIGRlZmluaWRvLgoKCiAgICAgICAgICAuY29sLWxnLTUub3JkZXItMShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzIuc3ZnIiwgZGF0YS1hb3M9Inpvb20taW4iKS5tYi00Lm1iLWxnLTAKICAgIAogICAgcC5tYi01IEFkaWNpb25hbCBhIGxvIGFudGVyaW9yLCBlbCBvYmpldGl2byBwcmluY2lwYWwgZGUgbGEgcHVibGljaWRhZCBlcyBlbCBkZSBlbmNvbnRyYXIgbGEgbWFuZXJhIGRlIG1hbnRlbmVyIHVuYSBjb211bmljYWNpw7NuIGVudHJlIGxhcyBlbXByZXNhcyB5IGVsIG1lcmNhZG8gb2JqZXRpdm8sIGFsIHF1ZSBxdWllcmVuIGxsZWdhciBhIHRyYXbDqXMgZGUgc3VzIHByb2R1Y3RvcyBvIHNlcnZpY2lvcywgY29uIGVsIGZpbiBubyBzb2xvIGRlIHZlbmRlciBzaW5vIGRlIG1hbnRlbmVyc2UgZW4gZWwgdGllbXBvIHkgbG9ncmFyIHF1ZSBzdXMgY2xpZW50ZXMgc2UgaWRlbnRpZmlxdWVuIHNpZW1wcmUsIG1hbnRlbmnDqW5kb3NlIHVuaWRvcywgYSB0cmF2w6lzIGRlIGxhcyBlbW9jaW9uZXMgeSBsYXMgc2Vuc2FjaW9uZXMuIAoKICAgIGgyLm1iLTUoZGF0YS1hb3M9ImZhZGUtdXAiKSBJZGVudGlmaWNhY2nDs24gZGVsIHDDumJsaWNvIG8gbWVyY2FkbyBvYmpldGl2bwoKICAgIC5yb3cubWItNQogICAgICAuY29sLWxnLTQub3JkZXItMgogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvMy5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpLmQtbm9uZS5kLWxnLWJsb2NrCiAgICAgIC5jb2wtbGctOC5vcmRlci0xCiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgS290bGVyICgyMDI0KSwgZW4gc3UgbGlicm8g4oCcTWFya2V0aW5nIGVtcHJlc2FyaWFsOiBtw6FzIGFsbMOhIGRlbCBwcm9mZXNpb25hbGlzbW8sIGhhY2lhIGxhIGNyZWF0aXZpZGFkLCBlbCBsaWRlcmF6Z28geSBsYSBzb3N0ZW5pYmlsaWRhZOKAnSwgaW5kaWNhIHF1ZSBlbCBtZXJjYWRvIGVzOiAKICAgICAgICAuYmxvcXVlLXRleHRvLWMuYmctY29sb3ItNi5wLTQubWItMyhkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgIGkuZmFzLmZhLXF1b3RlLWxlZnQKICAgICAgICAgIGgzLm1iLTIg4oCcQ29tbyB1bmEgZGlzY2lwbGluYSBxdWUgdmEgbcOhcyBhbGzDoSBkZSBsYSBzaW1wbGUgdmVudGEgZGUgcHJvZHVjdG9zIG8gc2VydmljaW9zLiBTZWfDum4gS290bGVyLCBlbCBtYXJrZXRpbmcgZXMgdW4gcHJvY2VzbyBpbnRlZ3JhbCBxdWUgaW1wbGljYSBsYSBpZGVudGlmaWNhY2nDs24geSBzYXRpc2ZhY2Npw7NuIGRlIGxhcyBuZWNlc2lkYWRlcyB5IGRlc2VvcyBkZSBsb3MgY29uc3VtaWRvcmVzLCBjcmVhbmRvIHZhbG9yIHBhcmEgZWxsb3MgeSBlc3RhYmxlY2llbmRvIHJlbGFjaW9uZXMgZHVyYWRlcmFzLiBFc3RlIGVuZm9xdWUgZGVzdGFjYSBsYSBpbXBvcnRhbmNpYSBkZSBsYSBjcmVhdGl2aWRhZCwgZWwgbGlkZXJhemdvIHkgbGEgc29zdGVuaWJpbGlkYWQgZW4gbGFzIGVzdHJhdGVnaWFzIGRlIG1hcmtldGluZywgYWRhcHTDoW5kb3NlIGEgdW4gZW50b3JubyBlbXByZXNhcmlhbCBlbiBjb25zdGFudGUgZXZvbHVjacOzbuKAnS4gCiAgICAgICAgICBzcGFuIC0gIEtvdGxlcgogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIFVuIG1lcmNhZG8gb2JqZXRpdm8gYmllbiBkZWZpbmlkbyBlcyBjcnVjaWFsIHBhcmEgZGlzZcOxYXIgbWVuc2FqZXMgZWZlY3Rpdm9zLiBNZWRpbmEgKDIwMTYpLCBzZcOxYWxhIHF1ZSBzZSBkZWJlbiBjb25zaWRlcmFyIGRvcyBhc3BlY3RvcyBjbGF2ZXM6CgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLXN0cmV0Y2gubWItNQogICAgICAuY29sLWxnLTYKICAgICAgICAuYmctY29sb3ItMy5wLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLmgtMTAwCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy80LnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICBoNS5tYi0yIFBlcmZpbCBkZW1vZ3LDoWZpY28uIAogICAgICAgICAgICAgIHAubWItMCBFZGFkLCBnw6luZXJvLCB1YmljYWNpw7NuLCBuaXZlbCBzb2Npb2Vjb27Ds21pY28uCgogICAgICAuY29sLWxnLTYKICAgICAgICAuYmctY29sb3ItMy5wLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLmgtMTAwCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy81LnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICBoNS5tYi0yIFBlcmZpbCBwc2ljb2dyw6FmaWNvLiAKICAgICAgICAgICAgICBwLm1iLTAgSW50ZXJlc2VzLCBhY3RpdHVkZXMsIGNvbXBvcnRhbWllbnRvcy4KCiAgICAuYmctZnVsbC13aWR0aC5iZy1mb25kby03Lm1iLTUKICAgICAgLnB4LWxnLTUucHktNS5weS1sZy0wLnB4LTQKCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgoKICAgICAgICAgIC5jb2wtbGctNy5vcmRlci0yKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgICAucHMtNS5wcy1sZy0wCiAgICAgICAgICAgICAgcC50ZXh0LWJvbGQgU2luIGVtYmFyZ28sIGRlIGFjdWVyZG8gY29uIGxhcyBkaWZlcmVudGVzIHRlb3LDrWFzIGRlIGxhIHNlZ21lbnRhY2nDs24sIGV4aXN0ZW4gdmFyaW9zIHRpcG9zOiAKICAgICAgICAgICAgICBwLm1iLTEgR2VvZ3LDoWZpY2EuCiAgICAgICAgICAgICAgcC5tYi0xIERlbW9ncsOhZmljYS4KICAgICAgICAgICAgICBwLm1iLTEgQ29tcG9ydGFtZW50YWwuCiAgICAgICAgICAgICAgcC5tYi0xIFBzaWNvZ3LDoWZpY2EuCiAgICAgICAgICAgICAgcC5tYi0xIFBvciB1c28gZGVsIHByb2R1Y3RvLgogICAgICAgICAgICAgIHAubWItMSBQb3IgY29tcG9ydGFtaWVudG8gZGUgY29tcHJhLgoKCiAgICAgICAgICAuY29sLTguY29sLWxnLTUub3JkZXItMQogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy82LnN2ZyIsIGRhdGEtYW9zPSJ6b29tLWluIikubWItNC5tYi1sZy0wCiAgICAKICAgIHAubWItNSBEaWNob3MgdGlwb3Mgc2UgcHVlZGVuIHByZXNlbnRhciBlbiBkb3MgY2FtcG9zIGVzZW5jaWFsZXMgZW4gbWVyY2Fkb3MgaW5kdXN0cmlhbGVzIHkgZGUgY29uc3VtaWRvcmVzLCBkb25kZSBzZSBwdWVkZW4gYXBsaWNhciBsb3Mgc2lndWllbnRlcyBwYXNvcywgcGFyYSBzZWdtZW50YXIgY29ycmVjdGFtZW50ZTogCgogICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIubWItNQogICAgICAuY29sLWxnLTQuZC1ub25lLmQtbGctYmxvY2sKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzcucG5nIiwgYWx0PSIiLCBkYXRhLWFvcz0iem9vbS1pbiIpLm10LTQubXQtbGctMAogICAgICAuY29sLWxnLTgKCiAgICAgICAgTGluZWFUaWVtcG9ELmNvbG9yLXByaW1hcmlvLmxhcmdlKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgZGl2KG51bWVybz0iMSIgdGl0dWxvPSJTZWdtZW50YWNpw7NuIGRlIG1lcmNhZG9zIGluZHVzdHJpYWxlcyIpCiAgICAgICAgICAgIHAgLSBTZWxlY2Npw7NuIGRlbCB1bml2ZXJzbzogZGVsaW1pdGFyIGVsIMOhcmVhIGRlIGNvYmVydHVyYSBxdWUgdGVuZHLDoSBlbCBwcm9kdWN0byBvIHNlcnZpY2lvIGRlc2RlIGVsIHB1bnRvIGRlIHZpc3RhIGdlb2dyw6FmaWNvLgogICAgICAgICAgICBwIC0gQ2FyYWN0ZXJpemFjacOzbiBkZWwgbWVyY2FkbzogdWJpY2FjacOzbiBnZW9ncsOhZmljYSwgdGFtYcOxbyBkZSBsYSBlbXByZXNhIHkgYWN0aXZpZGFkIGVjb27Ds21pY2EuCiAgICAgICAgICBkaXYobnVtZXJvPSIyIiB0aXR1bG89IlNlZ21lbnRhY2nDs24gZGUgbWVyY2Fkb3MgZGUgY29uc3VtaWRvcmVzIikKICAgICAgICAgICAgcCAtIE1lcmNhZG8gcG90ZW5jaWFsOiBzZSBhcGxpY2FuIHZhcmlhYmxlcyBkZW1vZ3LDoWZpY2FzIGVuIGxhcyBxdWUgc2UgYXNpZ25hbiByYW5nb3MgYW1wbGlvcywgZGViaWRvIGEgcXVlIHNlIHRlbmRyw6FuIGVuIGN1ZW50YSB0b2RhcyBwZXJzb25hcyBvIGNsaWVudGVzIHF1ZSBjb21wcmFuIHByb2R1Y3RvcyBzaW1pbGFyZXMgbyBkZSBsYSBjb21wZXRlbmNpYS4KICAgICAgICAgICAgcCAtIE1lcmNhZG8gcmVhbDogbGEgaWRlbnRpZmljYWNpw7NuIGRlIGVzdGUgc2VnbWVudG8gc2UgaGFjZSBhcGxpY2FuZG8gdmFyaWFibGVzIGRlbW9ncsOhZmljYXMsIHF1ZSBwZXJtaXRlbiBxdWUgc2VhIG3DoXMgb2JqZXRpdmEgZGViaWRvIGEgcXVlIGxhcyB2YXJpYWJsZXMgYSB1dGlsaXphciBzb24gbWVkaWJsZXMgeSBwdWVkZW4gZ2VuZXJhciBkYXRvcyBlc3RhZMOtc3RpY29zIMO6dGlsZXMgcGFyYSBlbCBkaXNlw7FvIGRlIGVzdHJhdGVnaWFzLgogICAgICAgICAgICBwIC0gQ2FyYWN0ZXJpemFjacOzbiBwc2ljb2dyw6FmaWNhOiBwZXJtaXRlIGlkZW50aWZpY2FyIGdydXBvcyBkZSBjb25zdW1pZG9yZXMgY29uIGJhc2UgZW4gdW4gcGVyZmlsIHBzaWNvbMOzZ2ljbyBjb23Dum4uCiAgICAgICAgICAgIHAgLSBDb21wb3J0YW1pZW50byBkZSBjb21wcmE6IGFuw6FsaXNpcyByZWxhY2lvbmFkbyBjb24gbGEgaW50ZXJhY2Npw7NuIGRlbCBtZXJjYWRvIGNvbiBlbCBwcm9kdWN0byBlbiBsYSByZWFsaXphY2nDs24gZGUgbGEgY29tcHJhLgogICAgICAgICAgCiAgICAuYmctZnVsbC13aWR0aC5iZy1mb25kby0xLm1iLTUKICAgICAgLnB4LTQucHgtbWQtNS5wYi1tZC0zCiAgICAgICAgcCBMYXMgaGVycmFtaWVudGFzIHBhcmEgZXNhIHNlZ21lbnRhY2nDs24sIHNvbjoKCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLXN0cmV0Y2gKICAgICAgICAgIC5jb2wtbGctNC5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkLTIuaC0xMDAKICAgICAgICAgICAgICBpbWcuY3VzdG9tLWltYWdlLWNhcmRfX2ltYWdlKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTMvOC5wbmcnLCBhbHQ9JycpCiAgICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkX190ZXh0LnAtNAogICAgICAgICAgICAgICAgaDUubWItMi50ZXh0LWNlbnRlciBBbsOhbGlzaXMgZGUgZGF0b3MKICAgICAgICAgICAgICAgIHAubWItMCBVc28gZGUgaGVycmFtaWVudGFzIGNvbW8gR29vZ2xlIEFuYWx5dGljcywgcGFyYSBjb25vY2VyIGEgbG9zIHVzdWFyaW9zLgogICAgICAgICAgLmNvbC1sZy00Lm1iLTQoZGF0YS1hb3M9Inpvb20taW4tZG93biIpCiAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZC0yLmgtMTAwCiAgICAgICAgICAgICAgaW1nLmN1c3RvbS1pbWFnZS1jYXJkX19pbWFnZShzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzkucG5nIiwgYWx0PSIiKQogICAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZF9fdGV4dC5wLTQKICAgICAgICAgICAgICAgIGg1Lm1iLTIudGV4dC1jZW50ZXIgRW5jdWVzdGFzIHkgPGVtPmZvY3VzIGdyb3VwczwvZW0+CiAgICAgICAgICAgICAgICBwLm1iLTAgQ29tcHJlbmRlciBuZWNlc2lkYWRlcyB5IG1vdGl2YWNpb25lcy4KICAgICAgICAgIC5jb2wtbGctNC5tYi00KGRhdGEtYW9zPSJ6b29tLWluLWRvd24iKQogICAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmQtMi5oLTEwMAogICAgICAgICAgICAgIGltZy5jdXN0b20taW1hZ2UtY2FyZF9faW1hZ2Uoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy8xMC5wbmciLCBhbHQ9IiIpCiAgICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkX190ZXh0LnAtNAogICAgICAgICAgICAgICAgaDUubWItMi50ZXh0LWNlbnRlciBTZWdtZW50YWNpw7NuIGNvbmR1Y3R1YWwKICAgICAgICAgICAgICAgIHAubWItMCBJZGVudGlmaWNhciBjb21wb3J0YW1pZW50b3MgZGUgY29tcHJhIG8gY29uc3VtbyBkZSBtZWRpb3MuCgogICAgI3RfM18yLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDMuMl0gU2VsZWNjacOzbiBkZSBtZWRpb3MgeSBjYW5hbGVzCgogICAgcCBTZWfDum4gQ29sbCBSdWJpbyAmIE1pY8OzIFNhbnogKDIwMTgpLCBsYSBlbGVjY2nDs24gZGUgbWVkaW9zIGRlcGVuZGUgZGUgZmFjdG9yZXMgY29tbyBlbCBww7pibGljbyBvYmpldGl2bywgZWwgcHJlc3VwdWVzdG8geSBsb3Mgb2JqZXRpdm9zIGRlIGxhIGNhbXBhw7FhLgogICAgcC5tYi01LnRleHQtYm9sZCBFbmNvbnRyYW1vczoKCiAgICBUYWJzQy5jb2xvci1wcmltYXJpby5tYi01CiAgICAgIC50YWJzLWNvbnRlbnQuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJNZWRpb3MgdHJhZGljaW9uYWxlcyIgOmljb249InJlcXVpcmUoJ0AvYXNzZXRzL2J1bGxldHMvMS5zdmcnKSIgKQogICAgICAgIC5yb3cKICAgICAgICAgIC5jb2wtbWQtNi5jb2wtbGctNy5jb2wteGwtOC5tYi00Lm1iLW1kLTAub3JkZXItMgogICAgICAgICAgICBoNCBNZWRpb3MgdHJhZGljaW9uYWxlcwogICAgICAgICAgICBwIDxiPlRlbGV2aXNpw7NuLjwvYj4gSWRlYWwgcGFyYSBjYW1wYcOxYXMgbWFzaXZhcyBjb24gYWx0YSBpbnZlcnNpw7NuLgogICAgICAgICAgICBwIDxiPlJhZGlvLjwvYj4gRWZlY3RpdmEgcGFyYSBhdWRpZW5jaWFzIGxvY2FsZXMgeSBzZWdtZW50YWRhcy4KICAgICAgICAgICAgcCA8Yj5QcmVuc2EgeSByZXZpc3Rhcy48L2I+IEFkZWN1YWRhIHBhcmEgbWVuc2FqZXMgZGV0YWxsYWRvcyB5IHDDumJsaWNvcyBlc3BlY8OtZmljb3MuCiAgICAgICAgCiAgICAgICAgICAuY29sLW1kLTYuY29sLWxnLTUuY29sLXhsLTQub3JkZXItMQogICAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEzLzExLnBuZycsIGFsdD0nJykKICAgICAgLnRhYnMtY29udGVudC5ib3JkZXIucHgtNC5wLW1kLTUucHktMyh0aXR1bG89Ik1lZGlvcyBkaWdpdGFsZXMiIDppY29uPSJyZXF1aXJlKCdAL2Fzc2V0cy9idWxsZXRzLzIuc3ZnJykiICkKICAgICAgICAucm93CiAgICAgICAgICAuY29sLW1kLTYuY29sLWxnLTcuY29sLXhsLTgubWItNC5tYi1tZC0wLm9yZGVyLTIKICAgICAgICAgICAgaDQgTWVkaW9zIGRpZ2l0YWxlcwogICAgICAgICAgICBwIDxiPlJlZGVzIHNvY2lhbGVzLjwvYj4gQWxjYW5jZSBtYXNpdm8geSBzZWdtZW50YWNpw7NuIHByZWNpc2EuCiAgICAgICAgICAgIHAgPGI+UHVibGljaWRhZCBlbiBidXNjYWRvcmVzIChTRU0pLjwvYj4gTGxlZ2FyIGEgdXN1YXJpb3MgaW50ZXJlc2Fkb3MgbWVkaWFudGUgcGFsYWJyYXMgY2xhdmVzLgogICAgICAgICAgICBwIDxiPkVtYWlsIG1hcmtldGluZy48L2I+IENvbXVuaWNhY2nDs24gZGlyZWN0YSB5IHBlcnNvbmFsaXphZGEuCgogICAgICAgIAogICAgICAgICAgLmNvbC1tZC02LmNvbC1sZy01LmNvbC14bC00Lm9yZGVyLTEKICAgICAgICAgICAgZmlndXJlKGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMy8xMi5wbmcnLCBhbHQ9JycpCiAgICAKICAgIC50aXR1bG8tZmlndXJhLm1iLTQKICAgICAgaDUgVGFibGEgMi4gCiAgICAgIHNwYW4gVmVudGFqYXMgeSBkZXN2ZW50YWphcwogICAgLnRhYmxhLWEubWItNQogICAgICB0YWJsZQogICAgICAgIHRoZWFkCiAgICAgICAgICB0cgogICAgICAgICAgICB0aCBUaXBvIGRlIG1lZGlvCiAgICAgICAgICAgIHRoIFZlbnRhamFzCiAgICAgICAgICAgIHRoIERlc3ZlbnRhamFzCgogICAgICAgIHRib2R5CiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBUcmFkaWNpb25hbAogICAgICAgICAgICB0ZCBBbXBsaW8gYWxjYW5jZSwgcmVjb25vY2ltaWVudG8gZGUgbWFyY2EuCiAgICAgICAgICAgIHRkIENvc3RvcyBlbGV2YWRvcywgZGlmw61jaWwgc2VnbWVudGFjacOzbi4gCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBEaWdpdGFsCiAgICAgICAgICAgIHRkIFNlZ21lbnRhY2nDs24gcHJlY2lzYSwgbWVkaWNpw7NuIGVuIHRpZW1wbyByZWFsLgogICAgICAgICAgICB0ZCBTYXR1cmFjacOzbiBkZSBhbnVuY2lvcywgcmVxdWllcmUgYWx0YSBleHBlcmllbmNpYS4KICAgICAgICAgICAgCiAgICBwLm1iLTUgQ29udGludWVtb3MgY29uIGxhIHBsYW5pZmljYWNpw7NuIGVuOgoKICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLm1iLTUKICAgICAgLmNvbC1sZy00Lm9yZGVyLTIuZC1ub25lLmQtbGctYmxvY2sKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzEzLnBuZyIsIGFsdD0iIiwgZGF0YS1hb3M9Inpvb20taW4iKS5tdC00Lm10LWxnLTAKICAgICAgLmNvbC1sZy04Lm9yZGVyLTEKCiAgICAgICAgTGluZWFUaWVtcG9ELmNvbG9yLXByaW1hcmlvLmxhcmdlKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgZGl2KG51bWVybz0iMSIgdGl0dWxvPSJSZWRlcyBzb2NpYWxlcyIpCiAgICAgICAgICAgIHAubWItMSBMYXMgcmVkZXMgY29tbyBGYWNlYm9vaywgSW5zdGFncmFtIHkgVGlrVG9rLCBwZXJtaXRlbiBjcmVhciBjYW1wYcOxYXMgc2VnbWVudGFkYXMsIGJhc2FkYXMgZW4gaW50ZXJlc2VzLCB1YmljYWNpb25lcyB5IGNvbXBvcnRhbWllbnRvcy4KICAgICAgICAgICAgcC5tYi0xLnRleHQtYm9sZCBFc3RyYXRlZ2lhczoKICAgICAgICAgICAgcC5tYi0xIC0gQ3JlYXIgY29udGVuaWRvIHJlbGV2YW50ZSB5IGF0cmFjdGl2by4KICAgICAgICAgICAgcC5tYi0xIC0gVXRpbGl6YXIgZm9ybWF0b3MgdmlzdWFsZXMgY29tbyB2aWRlb3MgeSByZWVscy4KICAgICAgICAgICAgcC5tYi0xIC0gTWVkaXIgcmVzdWx0YWRvcyBjb24gaGVycmFtaWVudGFzIGNvbW8gTWV0YSBBZHMgTWFuYWdlci4KCiAgICAgICAgICBkaXYobnVtZXJvPSIyIiB0aXR1bG89IlNFTyAoPGVtPlNlYXJjaCBFbmdpbmUgT3B0aW1pemF0aW9uPC9lbT4pIikKICAgICAgICAgICAgcC5tYi0xIE9wdGltaXphciBzaXRpb3Mgd2ViIHBhcmEgYXBhcmVjZXIgZW4gbG9zIHByaW1lcm9zIHJlc3VsdGFkb3MgZGUgYsO6c3F1ZWRhIGVuIEdvb2dsZS4KICAgICAgICAgICAgcC5tYi0xLnRleHQtYm9sZCBFc3RyYXRlZ2lhczoKICAgICAgICAgICAgcC5tYi0xIC0gVXNvIGRlIHBhbGFicmFzIGNsYXZlIHJlbGV2YW50ZXMuCiAgICAgICAgICAgIHAubWItMSAtIENvbnRlbmlkbyBkZSBjYWxpZGFkLgogICAgICAgICAgICBwLm1iLTEgLSBNZWpvcmEgZGUgbGEgdmVsb2NpZGFkIGRlbCBzaXRpby4KICAgICAgICAgIGRpdihudW1lcm89IjMiIHRpdHVsbz0iQ2FtcGHDsWFzIE9tbmljYW5hbCIpCiAgICAgICAgICAgIHAubWItMSBJbnRlZ3JhciBtZWRpb3MgdHJhZGljaW9uYWxlcyB5IGRpZ2l0YWxlcyBwYXJhIG9mcmVjZXIgdW5hIGV4cGVyaWVuY2lhIGNvbnNpc3RlbnRlIGFsIGNvbnN1bWlkb3IuCgogICAgI3RfM18zLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDMuM10gTWVkaWNpw7NuIHkgZXZhbHVhY2nDs24gCiAgICAKICAgIC5yb3cubWItNQogICAgICAuY29sLWxnLTgKICAgICAgICAuYmctY29sb3ItMi5wLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTQKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzE0LnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICBwLm1iLTAgU2Vnw7puIFJvaWcgKDIwMjIpLCBsb3MgS1BJcyAoSW5kaWNhZG9yZXMgQ2xhdmVzIGRlIERlc2VtcGXDsW8pIHNvbiBoZXJyYW1pZW50YXMgZXNlbmNpYWxlcyBwYXJhIG1lZGlyIHkgb3B0aW1pemFyIGVsIGRlc2VtcGXDsW8gZGUgbGFzIGNhbXBhw7FhcyBwdWJsaWNpdGFyaWFzLiBQZXJtaXRlbiBhIGxvcyBlcXVpcG9zIGV2YWx1YXIgc2kgbGFzIGVzdHJhdGVnaWFzIHNvbiBlZmVjdGl2YXMgeSBhanVzdGFyIGVuIHRpZW1wbyByZWFsIHBhcmEgbWF4aW1pemFyIGxvcyByZXN1bHRhZG9zLiBVbmEgaW1wbGVtZW50YWNpw7NuIGFkZWN1YWRhIGRlIEtQSXMgYXNlZ3VyYSBxdWUgbGFzIGNhbXBhw7FhcyBubyBzb2xvIGN1bXBsYW4gY29uIHN1cyBvYmpldGl2b3MsIHNpbm8gcXVlIHRhbWJpw6luIGJyaW5kZW4gdW4gcmV0b3JubyB0YW5naWJsZSBzb2JyZSBsYSBpbnZlcnNpw7NuLgogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIEFsZ3Vub3MgdGlwb3MgZGUgS1BJcyBzb246IAoKICAgICAgLmNvbC1sZy00CiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy8xNS5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWZvbmRvLXNsaWRlci5tYi01CiAgICAgIC5wLTQucC1tZC01CiAgICAgICAgU2x5ZGVyQSh0aXBvPSJiIikuYmctd2hpdGUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzE2LnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNwogICAgICAgICAgICAgIGg1IEtQSXMgZGUgYWxjYW5jZQoKICAgICAgICAgICAgICBwIE1pZGVuIGN1w6FudGFzIHBlcnNvbmFzIGhhbiBzaWRvIGV4cHVlc3RhcyBhIGxvcyBtZW5zYWplcyBkZSBsYSBjYW1wYcOxYS4KICAgICAgICAgICAgICB1bC5saXN0YS11bAogICAgICAgICAgICAgICAgbGkubWItMgogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUKICAgICAgICAgICAgICAgICAgfCA8Yj5JbXByZXNpb25lcy48L2I+IENhbnRpZGFkIGRlIHZlY2VzIHF1ZSB1biBhbnVuY2lvIHNlIG11ZXN0cmEgYSBsb3MgdXN1YXJpb3MuCiAgICAgICAgICAgICAgICBsaS5tYi0yCiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZQogICAgICAgICAgICAgICAgICB8IDxiPkFsY2FuY2UuPC9iPiBDYW50aWRhZCDDum5pY2EgZGUgcGVyc29uYXMgcXVlIGhhbiB2aXN0byBlbCBhbnVuY2lvLgogICAgICAgICAgICAgIHAgPGI+RWplbXBsby48L2I+IEVuIHVuYSBjYW1wYcOxYSBkaWdpdGFsLCBzZSByZWdpc3RyYSB1biBhbGNhbmNlIGRlIDUwMCwwMDAgcGVyc29uYXMgY29uIDEgbWlsbMOzbiBkZSBpbXByZXNpb25lcywgbG8gcXVlIGluZGljYSBxdWUgYWxndW5vcyB1c3VhcmlvcyBoYW4gdmlzdG8gZWwgYW51bmNpbyBtw6FzIGRlIHVuYSB2ZXouCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNQogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvMTcucG5nIikKICAgICAgICAgICAgLmNvbC1sZy03CiAgICAgICAgICAgICAgaDUgS1BJcyBkZSBpbnRlcmFjY2nDs24KICAgICAgICAgICAgICBwIEV2YWzDumFuIGPDs21vIGxhcyBwZXJzb25hcyByZXNwb25kZW4gYSBsb3MgYW51bmNpb3MgeSBjb250ZW5pZG8gZGUgbGEgY2FtcGHDsWEuCiAgICAgICAgICAgICAgdWwubGlzdGEtdWwKICAgICAgICAgICAgICAgIGxpLm1iLTIKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlCiAgICAgICAgICAgICAgICAgIHwgPGI+VGFzYSBkZSBjbGljcyAoQ1RSIC0gQ2xpY2sgVGhyb3VnaCBSYXRlKS48L2I+IFBvcmNlbnRhamUgZGUgcGVyc29uYXMgcXVlIGhpY2llcm9uIGNsaWMgZW4gZWwgYW51bmNpbywgZW4gcmVsYWNpw7NuIGNvbiBlbCBuw7ptZXJvIGRlIGltcHJlc2lvbmVzLjxicj4gQ1RSID0gKENsaWNzIC8gSW1wcmVzaW9uZXMpIMOXIDEwMAogICAgICAgICAgICAgICAgbGkubWItMgogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUKICAgICAgICAgICAgICAgICAgfCA8Yj5FbmdhZ2VtZW50LjwvYj4gSW50ZXJhY2Npb25lcyB0b3RhbGVzIGVuIHJlZGVzIHNvY2lhbGVzIChsaWtlcywgY29tZW50YXJpb3MsIGNvbXBhcnRpZG9zKSBkaXZpZGlkYXMgcG9yIGVsIG7Dum1lcm8gZGUgdXN1YXJpb3MgYWxjYW56YWRvcy4KICAgICAgICAgICAgICBwIDxiPkVqZW1wbG8uPC9iPiBVbiBhbnVuY2lvIGVuIEZhY2Vib29rIHRpZW5lIDIsMDAwIGNsaWNzIHkgMTAwLDAwMCBpbXByZXNpb25lcywgbG8gcXVlIGRhIHVuIENUUiBkZWwgMiAlLgogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzE4LnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNwogICAgICAgICAgICAgIGg1IEtQSXMgZGUgY29udmVyc2nDs24KICAgICAgICAgICAgICBwIE1pZGVuIGN1w6FudGFzIHBlcnNvbmFzIHJlYWxpemFyb24gdW5hIGFjY2nDs24gZGVzZWFkYSwgZGVzcHXDqXMgZGUgaW50ZXJhY3R1YXIgY29uIGxhIGNhbXBhw7FhLgogICAgICAgICAgICAgIHVsLmxpc3RhLXVsCiAgICAgICAgICAgICAgICBsaS5tYi0yCiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZQogICAgICAgICAgICAgICAgICB8IDxiPlRhc2EgZGUgY29udmVyc2nDs24uPC9iPiBQb3JjZW50YWplIGRlIHVzdWFyaW9zIHF1ZSBjb21wbGV0YXJvbiB1bmEgYWNjacOzbiBlc3BlY8OtZmljYSwgY29tbyByZWFsaXphciB1bmEgY29tcHJhIG8gcmVnaXN0cmFyc2UgZW4gdW4gZm9ybXVsYXJpby4gPGJyPlRhc2EgZGUgQ29udmVyc2nDs24gPSAoQ29udmVyc2lvbmVzL0NsaWNzKSDDlyAxMDAKICAgICAgICAgICAgICAgIGxpLm1iLTIKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlCiAgICAgICAgICAgICAgICAgIHwgPGI+Q29zdG8gcG9yIGNvbnZlcnNpw7NuLjwvYj4gQ3XDoW50byBjdWVzdGEgY2FkYSBhY2Npw7NuIGRlc2VhZGEgZW4gdMOpcm1pbm9zIGRlIGludmVyc2nDs24gcHVibGljaXRhcmlhLgogICAgICAgICAgICAgIHAgPGI+RWplbXBsby48L2I+IEVuIHVuYSBjYW1wYcOxYSBkZSBlbWFpbCBtYXJrZXRpbmcsIDUwMCBwZXJzb25hcyBzZSByZWdpc3RyYXJvbiBlbiB1biBldmVudG8gdHJhcyByZWNpYmlyIHVuIGNvcnJlbywgZGUgdW4gdG90YWwgZGUgMTAsMDAwIGNsaWNzLiBMYSB0YXNhIGRlIGNvbnZlcnNpw7NuIGVzIGRlbCA1ICUuCgogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzE5LnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNwogICAgICAgICAgICAgIGg1IEtQSXMgZGUgUmV0b3JubyBkZSBJbnZlcnNpw7NuIChST0kpCiAgICAgICAgICAgICAgcCBFdmFsw7phbiBlbCBiZW5lZmljaW8gZmluYW5jaWVybyBnZW5lcmFkbywgZW4gY29tcGFyYWNpw7NuIGNvbiBsYSBpbnZlcnNpw7NuIHJlYWxpemFkYS4KICAgICAgICAgICAgICB1bC5saXN0YS11bAogICAgICAgICAgICAgICAgbGkubWItMgogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUKICAgICAgICAgICAgICAgICAgfCA8Yj5ST0kgKFJldHVybiBvbiBJbnZlc3RtZW50KS48L2I+IE1pZGUgbGEgZ2FuYW5jaWEgb2J0ZW5pZGEgcmVzcGVjdG8gYWwgZGluZXJvIGludmVydGlkby4gPGJyPiBST0kgPSAoKEdhbmFuY2lhIE5ldGHiiJJJbnZlcnNpw7NuKSAvIChpbnZlcnNpw7NuKSDDlyAxMDApCgogICAgICAgICAgICAgIHAgPGI+RWplbXBsby48L2I+IFNpIHVuYSBjYW1wYcOxYSBnZW5lcmEgJDEwLDAwMCBlbiB2ZW50YXMgY29uIHVuYSBpbnZlcnNpw7NuIGRlICQyLDAwMCwgZWwgUk9JIGVzOiA8YnI+IFJPSSA9ICgoMTAsMDAw4oiSMiwwMDApIC8gMiwwMDApIMOXICgxMDApID0gNDAwICUKCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNQogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvMjAucG5nIikKICAgICAgICAgICAgLmNvbC1sZy03CiAgICAgICAgICAgICAgaDUgS1BJcyBkZSBsZWFsdGFkIHkgcmV0ZW5jacOzbgogICAgICAgICAgICAgIHAgTWlkZW4gZWwgY29tcHJvbWlzbyBkZWwgY2xpZW50ZSBjb24gbGEgbWFyY2EgZGVzcHXDqXMgZGUgbGEgY2FtcGHDsWEuCiAgICAgICAgICAgICAgdWwubGlzdGEtdWwKICAgICAgICAgICAgICAgIGxpLm1iLTIKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlCiAgICAgICAgICAgICAgICAgIHwgPGI+VGFzYSBkZSByZXBldGljacOzbi48L2I+IFBvcmNlbnRhamUgZGUgY2xpZW50ZXMgcXVlIHZ1ZWx2ZW4gYSBpbnRlcmFjdHVhciBjb24gbGEgbWFyY2EuCiAgICAgICAgICAgICAgICBsaS5tYi0yCiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZQogICAgICAgICAgICAgICAgICB8IDxiPk5ldCBQcm9tb3RlciBTY29yZSAoTlBTKS48L2I+IEV2YWzDumEgY3XDoW50b3MgY2xpZW50ZXMgcmVjb21lbmRhcsOtYW4gbGEgbWFyY2EgYSBvdHJvcy4KCiAgICAgICAgICAgICAgcCA8Yj5FamVtcGxvLjwvYj4gVW5hIGVuY3Vlc3RhIHBvc3QtY2FtcGHDsWEgcmV2ZWxhIHF1ZSBlbCA4MCAlIGRlIGxvcyBjbGllbnRlcyBlc3TDoW4gZGlzcHVlc3RvcyBhIHJlY29tZW5kYXIgZWwgcHJvZHVjdG8uCiAgICAgICAgIAogICAgaDIubWItNShkYXRhLWFvcz0iZmFkZS11cCIpIEFqdXN0ZXMgeSBvcHRpbWl6YWNpw7NuIGVuIGNhbXBhw7FhcwoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1zdHJldGNoLm1iLTUKICAgICAgLmNvbC1sZy04CiAgICAgICAgcCBMYXMgY2FtcGHDsWFzIHB1YmxpY2l0YXJpYXMgc2UgZW5mcmVudGFuIGEgZmFjdG9yZXMgaW5lc3BlcmFkb3MgcXVlIHB1ZWRlbiBhZmVjdGFyIGVsIGRlc2VtcGXDsW8sIGNvbW8gY2FtYmlvcyBlbiBlbCBjb21wb3J0YW1pZW50byBkZWwgcMO6YmxpY28sIGVycm9yZXMgZW4gbGEgc2VnbWVudGFjacOzbiBvIHVuIGJham8gcmVuZGltaWVudG8gZGUgbG9zIG1lbnNhamVzLiBMYSBvcHRpbWl6YWNpw7NuIGRlIGRpY2hhcyBjYW1wYcOxYXMgcGVybWl0ZToKICAgICAgICAucHktNC5weC01LmJnLWNvbG9yLTMoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKS5tYi0zCiAgICAgICAgICB1bC5saXN0YS11bAogICAgICAgICAgICBsaS5tYi0yCiAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlCiAgICAgICAgICAgICAgfCBNZWpvcmFyIGxhIHJlbnRhYmlsaWRhZCBkZSBsYSBpbnZlcnNpw7NuIHB1YmxpY2l0YXJpYSAoUk9JKS4KICAgICAgICAgICAgbGkubWItMgogICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZQogICAgICAgICAgICAgIHwgTWF4aW1pemFyIGVsIGltcGFjdG8gZW4gZWwgcMO6YmxpY28gb2JqZXRpdm8uCiAgICAgICAgICAgIGxpLm1iLTIKICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUKICAgICAgICAgICAgICB8IEFkYXB0YXJzZSByw6FwaWRhbWVudGUgYSBudWV2YXMgdGVuZGVuY2lhcyBvIGRhdG9zIGVtZXJnZW50ZXMuCgogICAgICAgIHAgUm9pZyAoMjAyMikgc2XDsWFsYSBxdWUgZWwgYW7DoWxpc2lzIGNvbnRpbnVvIGRlIGxvcyByZXN1bHRhZG9zIGV2aXRhIHF1ZSB1bmEgY2FtcGHDsWEgcGllcmRhIGVmZWN0aXZpZGFkLCBsbyBxdWUgZXMgZXNwZWNpYWxtZW50ZSByZWxldmFudGUgZW4gY29udGV4dG9zIGRpZ2l0YWxlcywgZG9uZGUgbGFzIHZhcmlhYmxlcyBjYW1iaWFuIHLDoXBpZGFtZW50ZS4gRXMgYXPDrSwgY29tbyBkZXN0YWNhIGxhcyBzaWd1aWVudGVzIGFjY2lvbmVzIHBhcmEgb3B0aW1pemFyIGxhcyBjYW1wYcOxYXM6IAoKICAgICAgLmNvbC1sZy00CiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy8yMS5wbmciLCBhbHQ9IiIsIGRhdGEtYW9zPSJ6b29tLWluIikKICAgIAogICAgLmJnLWZ1bGwtd2lkdGguYmctZm9uZG8tMS5tYi01CiAgICAgIC5weC00LnB4LW1kLTUucGItbWQtMwoKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtc3RyZXRjaAogICAgICAgICAgLmNvbC1sZy00Lm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmQtMi5oLTEwMAogICAgICAgICAgICAgIGltZy5jdXN0b20taW1hZ2UtY2FyZF9faW1hZ2Uoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMy8yMi5wbmcnLCBhbHQ9JycpCiAgICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkX190ZXh0LnAtNAogICAgICAgICAgICAgICAgaDUubWItMi50ZXh0LWNlbnRlciBBanVzdGFyIGxhIHNlZ21lbnRhY2nDs24KICAgICAgICAgICAgICAgIHAubWItMCBSZWZpbmFyIGVsIHDDumJsaWNvIG9iamV0aXZvLCBzZWfDum4gbG9zIHJlc3VsdGFkb3MuCiAgICAgICAgICAuY29sLWxnLTQubWItNChkYXRhLWFvcz0iem9vbS1pbi1kb3duIikKICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkLTIuaC0xMDAKICAgICAgICAgICAgICBpbWcuY3VzdG9tLWltYWdlLWNhcmRfX2ltYWdlKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvMjMucG5nIiwgYWx0PSIiKQogICAgICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZF9fdGV4dC5wLTQKICAgICAgICAgICAgICAgIGg1Lm1iLTIudGV4dC1jZW50ZXIgQ2FtYmlhciBsb3MgbWVuc2FqZXMKICAgICAgICAgICAgICAgIHAubWItMCBQcm9iYXIgZGlmZXJlbnRlcyBtZW5zYWplcyBwYXJhIGlkZW50aWZpY2FyIGN1w6FsIGdlbmVyYSBtw6FzIGludGVyYWNjacOzbi4KICAgICAgICAgIC5jb2wtbGctNC5tYi00KGRhdGEtYW9zPSJ6b29tLWluLWRvd24iKQogICAgICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmQtMi5oLTEwMAogICAgICAgICAgICAgIGltZy5jdXN0b20taW1hZ2UtY2FyZF9faW1hZ2Uoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy8yNC5wbmciLCBhbHQ9IiIpCiAgICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkX190ZXh0LnAtNAogICAgICAgICAgICAgICAgaDUubWItMi50ZXh0LWNlbnRlciBPcHRpbWl6YXIgZWwgcHJlc3VwdWVzdG8KICAgICAgICAgICAgICAgIHAubWItMCBSZWRpc3RyaWJ1aXIgbGEgaW52ZXJzacOzbiBoYWNpYSBjYW5hbGVzIG3DoXMgZWZlY3Rpdm9zLgoKICAgIAogICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIubWItNQogICAgICAuY29sLWxnLTQub3JkZXItMgogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvMjUucG5nIiwgYWx0PSIiLCBkYXRhLWFvcz0iem9vbS1pbiIpLm10LTQubXQtbGctMAogICAgICAuY29sLWxnLTgub3JkZXItMQogICAgICAgIGgyLm1iLTMoZGF0YS1hb3M9ImZhZGUtdXAiKSBGYXNlcyBwYXJhIGFqdXN0YXIgeSBvcHRpbWl6YXIgdW5hIGNhbXBhw7FhCiAgICAgICAgcC5tYi01IExhIG9wdGltaXphY2nDs24gZGUgY2FtcGHDsWFzIGltcGxpY2EgdW4gY2ljbG8gY29udGludW8gZGU6IAogICAgICAgIExpbmVhVGllbXBvRC5jb2xvci1wcmltYXJpby5sYXJnZShkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgIGRpdihudW1lcm89IjEiIHRpdHVsbz0iQW7DoWxpc2lzIGRlIHJlc3VsdGFkb3MiKQogICAgICAgICAgICBwLm1iLTEgLSA8Yj5Nb25pdG9yZW8gZGUgS1BJcy48L2I+IEluZGljYWRvcmVzIGNvbW8gQ1RSLCB0YXNhIGRlIGNvbnZlcnNpw7NuLCBST0ksIHkgYWxjYW5jZSBheXVkYW4gYSBpZGVudGlmaWNhciDDoXJlYXMgZGUgbWVqb3JhLgogICAgICAgICAgICBwLm1iLTEgLSA8Yj5TZWdtZW50YWNpw7NuIGRlbCByZW5kaW1pZW50by48L2I+IEV2YWx1YXIgY8OzbW8gcmVzcG9uZGVuIGRpZmVyZW50ZXMgc2VnbWVudG9zIGRlbCBww7pibGljbyBvYmpldGl2byBhIGxhcyBlc3RyYXRlZ2lhcyB5IGFudW5jaW9zLgogICAgICAgICAgICBwLm1iLTEgLSA8Yj5Db21wYXJhdGl2YSBlbnRyZSBjYW5hbGVzLjwvYj4gSWRlbnRpZmljYXIgY3XDoWxlcyBtZWRpb3MgbyBwbGF0YWZvcm1hcyBlc3TDoW4gZ2VuZXJhbmRvIG1lam9yZXMgcmVzdWx0YWRvcy4KCgogICAgICAgICAgZGl2KG51bWVybz0iMiIgdGl0dWxvPSJJZGVudGlmaWNhY2nDs24gZGUgcHJvYmxlbWFzIikKICAgICAgICAgICAgcC5tYi0xIC0gPGI+QmFqYSBpbnRlcmFjY2nDs24uPC9iPiBTaSBlbCBDVFIgZXMgYmFqbywgZWwgbWVuc2FqZSBvIGRpc2XDsW8gcG9kcsOtYSBubyBlc3RhciBjYXB0YW5kbyBsYSBhdGVuY2nDs24gZGVsIHDDumJsaWNvLgogICAgICAgICAgICBwLm1iLTEgLSA8Yj5Db252ZXJzaW9uZXMgaW5zdWZpY2llbnRlcy48L2I+IFVuYSB0YXNhIGRlIGNvbnZlcnNpw7NuIGJhamEgcG9kcsOtYSBpbmRpY2FyIHByb2JsZW1hcyBlbiBsYSBzZWdtZW50YWNpw7NuIG8gZW4gbGEgcHJvcHVlc3RhIGRlIHZhbG9yLgogICAgICAgICAgICBwLm1iLTEgLSA8Yj5QcmVzdXB1ZXN0byBtYWwgZGlzdHJpYnVpZG8uPC9iPiBDYW5hbGVzIGNvbiBiYWpvIHJlbmRpbWllbnRvIHB1ZWRlbiBlc3RhciByZWNpYmllbmRvIHVuYSBpbnZlcnNpw7NuIGV4Y2VzaXZhLgoKICAgICAgICAgIGRpdihudW1lcm89IjMiIHRpdHVsbz0iSW1wbGVtZW50YWNpw7NuIGRlIGFqdXN0ZXMiKQogICAgICAgICAgICBwLm1iLTEgPGI+Q2FtYmlhciBlbGVtZW50b3MgY3JlYXRpdm9zLjwvYj46IE1vZGlmaWNhciB0ZXh0b3MsIGltw6FnZW5lcyBvIHZpZGVvcyBxdWUgbm8gZXN0w6FuIGdlbmVyYW5kbyBlbCBpbXBhY3RvIGRlc2VhZG8uCiAgICAgICAgICAgIHAubWItMSA8Yj5SZWZpbmFyIGxhIHNlZ21lbnRhY2nDs24uPC9iPiBBanVzdGFyIGVsIHDDumJsaWNvIG9iamV0aXZvIGJhc2FkbyBlbiBkYXRvcyBkZW1vZ3LDoWZpY29zIG8gY29tcG9ydGFtZW50YWxlcy4KICAgICAgICAgICAgcC5tYi0xIDxiPlJlYXNpZ25hciBwcmVzdXB1ZXN0by48L2I+IEluY3JlbWVudGFyIGxhIGludmVyc2nDs24gZW4gbG9zIGNhbmFsZXMgbcOhcyBlZmVjdGl2b3MgeSByZWR1Y2lybGEgZW4gbG9zIG1lbm9zIHByb2R1Y3Rpdm9zLgoKICAgICAgICAgICAgcCBTZWfDum4gQ29sbCBSdWJpbyAmIE1pY8OzIFNhbnogKDIwMTgpLCBsYSBlbGVjY2nDs24gZGUgbWVkaW9zIGRlcGVuZGUgZGUgZmFjdG9yZXMgY29tbyBlbCBww7pibGljbyBvYmpldGl2bywgZWwgcHJlc3VwdWVzdG8geSBsb3Mgb2JqZXRpdm9zIGRlIGxhIGNhbXBhw7FhLgogICAgCiAgICBoMi5tYi0zKGRhdGEtYW9zPSJmYWRlLXVwIikgVMOpY25pY2FzIGRlIG9wdGltaXphY2nDs24KICAgIHAubWItNS50ZXh0LWJvbGQgU2Vnw7puIENvbGwgUnViaW8gJiBNaWPDsyBTYW56ICgyMDE4KSwgZXhpc3RlbiB2YXJpYXMgZXN0cmF0ZWdpYXMgcGFyYSBvcHRpbWl6YXIgZWwgZGVzZW1wZcOxbyBkZSB1bmEgY2FtcGHDsWE6CgogICAgVGFic0MuY29sb3ItcHJpbWFyaW8ubWItNQogICAgICAudGFicy1jb250ZW50LmJvcmRlci5weC00LnAtbWQtNS5weS0zKHRpdHVsbz0iTWVkaW9zIHRyYWRpY2lvbmFsZXMiIDppY29uPSJyZXF1aXJlKCdAL2Fzc2V0cy9idWxsZXRzLzMuc3ZnJykiICkKICAgICAgICAucm93CiAgICAgICAgICAuY29sLW1kLTYuY29sLWxnLTcuY29sLXhsLTgubWItNC5tYi1tZC0wLm9yZGVyLTIKICAgICAgICAgICAgaDQgUHJ1ZWJhcyBBL0IKICAgICAgICAgICAgcCBDb25zaXN0ZW4gZW4gY29tcGFyYXIgZG9zIHZlcnNpb25lcyBkZSB1biBhbnVuY2lvIChBIHkgQikgcGFyYSBpZGVudGlmaWNhciBjdcOhbCB0aWVuZSBtZWpvciBkZXNlbXBlw7FvLiBQb3IgZWplbXBsbywgcHJvYmFyIGRvcyB0aXR1bGFyZXMgZGlmZXJlbnRlcyBlbiB1biBhbnVuY2lvIGRlIEZhY2Vib29rIHkgbWVkaXIgY3XDoWwgZ2VuZXJhIG3DoXMgY2xpY3MuCiAgICAgICAgCiAgICAgICAgICAuY29sLW1kLTYuY29sLWxnLTUuY29sLXhsLTQub3JkZXItMQogICAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEzLzI2LnBuZycsIGFsdD0nJykKICAgICAgLnRhYnMtY29udGVudC5ib3JkZXIucHgtNC5wLW1kLTUucHktMyh0aXR1bG89Ik1lZGlvcyBkaWdpdGFsZXMiIDppY29uPSJyZXF1aXJlKCdAL2Fzc2V0cy9idWxsZXRzLzQuc3ZnJykiICkKICAgICAgICAucm93CiAgICAgICAgICAuY29sLW1kLTYuY29sLWxnLTcuY29sLXhsLTgubWItNC5tYi1tZC0wLm9yZGVyLTIKICAgICAgICAgICAgaDQgPGVtPlJldGFyZ2V0aW5nPC9lbT4KICAgICAgICAgICAgcCBEaXJpZ2lkbyBhIHVzdWFyaW9zIHF1ZSB5YSBpbnRlcmFjdHVhcm9uIGNvbiBsYSBtYXJjYSwgZWwgPGVtPnJldGFyZ2V0aW5nPC9lbT4gYXVtZW50YSBsYSBwcm9iYWJpbGlkYWQgZGUgY29udmVyc2nDs24sIGFsIG1vc3RyYXIgYW51bmNpb3MgcGVyc29uYWxpemFkb3MuCgogICAgICAgIAogICAgICAgICAgLmNvbC1tZC02LmNvbC1sZy01LmNvbC14bC00Lm9yZGVyLTEKICAgICAgICAgICAgZmlndXJlKGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMy8yNy5wbmcnLCBhbHQ9JycpCiAgICAgIC50YWJzLWNvbnRlbnQuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJNZWRpb3MgZGlnaXRhbGVzIiA6aWNvbj0icmVxdWlyZSgnQC9hc3NldHMvYnVsbGV0cy81LnN2ZycpIiApCiAgICAgICAgLnJvdwogICAgICAgICAgLmNvbC1tZC02LmNvbC1sZy03LmNvbC14bC04Lm1iLTQubWItbWQtMC5vcmRlci0yCiAgICAgICAgICAgIGg0IE9wdGltaXphY2nDs24gZGUgcHJlc3VwdWVzdG9zCiAgICAgICAgICAgIHAgUmVkaXN0cmlidWlyIGxhIGludmVyc2nDs24gaGFjaWEgbG9zIGNhbmFsZXMgeSBmb3JtYXRvcyBxdWUgZXN0w6luIGdlbmVyYW5kbyBtZWpvcmVzIHJlc3VsdGFkb3MuIEhlcnJhbWllbnRhcyBjb21vIEdvb2dsZSBBZHMsIHBlcm1pdGVuIGF1dG9tYXRpemFyIGVzdGUgcHJvY2Vzby4KCiAgICAgICAgCiAgICAgICAgICAuY29sLW1kLTYuY29sLWxnLTUuY29sLXhsLTQub3JkZXItMQogICAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEzLzI4LnBuZycsIGFsdD0nJykKICAgICAgLnRhYnMtY29udGVudC5ib3JkZXIucHgtNC5wLW1kLTUucHktMyh0aXR1bG89Ik1lZGlvcyBkaWdpdGFsZXMiIDppY29uPSJyZXF1aXJlKCdAL2Fzc2V0cy9idWxsZXRzLzYuc3ZnJykiICkKICAgICAgICAucm93CiAgICAgICAgICAuY29sLW1kLTYuY29sLWxnLTcuY29sLXhsLTgubWItNC5tYi1tZC0wLm9yZGVyLTIKICAgICAgICAgICAgaDQgQWRhcHRhY2nDs24gZGUgbWVuc2FqZXMKICAgICAgICAgICAgcCBDYW1iaWFyIGVsIHRvbm8sIGVzdGlsbyBvIGNvbnRlbmlkbyBkZSBsb3MgYW51bmNpb3MsIHBhcmEgYWxpbmVhcnNlIG1lam9yIGNvbiBsYXMgbmVjZXNpZGFkZXMgZGVsIHDDumJsaWNvLiBFc3RvIGVzIMO6dGlsIGN1YW5kbyBsb3MgZGF0b3MgbXVlc3RyYW4gcXVlIGVsIG1lbnNhamUgbm8gZXN0w6EgcmVzb25hbmRvLgoKICAgICAgICAKICAgICAgICAgIC5jb2wtbWQtNi5jb2wtbGctNS5jb2wteGwtNC5vcmRlci0xCiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTMvMjkucG5nJywgYWx0PScnKQogICAgCiAgICBoMi5tYi0zKGRhdGEtYW9zPSJmYWRlLXVwIikgSGVycmFtaWVudGFzIHBhcmEgbGEgb3B0aW1pemFjacOzbgogICAgcC5tYi01IEVuIGxhIGVyYSBkaWdpdGFsLCBleGlzdGVuIG51bWVyb3NhcyBwbGF0YWZvcm1hcyB5IGhlcnJhbWllbnRhcyBwYXJhIGZhY2lsaXRhciBlbCBhbsOhbGlzaXMgeSBhanVzdGUgZGUgY2FtcGHDsWFzLCBjb21vIHNvbjoKICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLm1iLTUKICAgICAgLmNvbC1sZy00Lm9yZGVyLTIKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzMwLnBuZyIsIGFsdD0iIiwgZGF0YS1hb3M9Inpvb20taW4iKS5tdC00Lm10LWxnLTAKICAgICAgLmNvbC1sZy04Lm9yZGVyLTEKICAgIAogICAgICAgIExpbmVhVGllbXBvRC5jb2xvci1wcmltYXJpby5sYXJnZShkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgIGRpdihudW1lcm89IjEiIHRpdHVsbz0iR29vZ2xlIEFuYWx5dGljcyIpCiAgICAgICAgICAgIHAubWItMSBQZXJtaXRlIHJhc3RyZWFyIGVsIGNvbXBvcnRhbWllbnRvIGRlIGxvcyB1c3VhcmlvcyBlbiB1biBzaXRpbyB3ZWIsIGV2YWx1YW5kbyBlbCBpbXBhY3RvIGRlIGxhcyBjYW1wYcOxYXMgZW4gdHLDoWZpY28geSBjb252ZXJzaW9uZXMuCiAgICAgICAgICBkaXYobnVtZXJvPSIyIiB0aXR1bG89Ik1ldGEgQWRzIE1hbmFnZXIiKQogICAgICAgICAgICBwLm1iLTEgUGVybWl0ZSBhZG1pbmlzdHJhciBjYW1wYcOxYXMgZW4gRmFjZWJvb2sgZSBJbnN0YWdyYW0sIHByb3BvcmNpb25hIG3DqXRyaWNhcyBlbiB0aWVtcG8gcmVhbCB5IHBlcm1pdGUgcmVhbGl6YXIgYWp1c3RlcyBkZSBzZWdtZW50YWNpw7NuIHkgcHJlc3VwdWVzdG8uCiAgICAgICAgICBkaXYobnVtZXJvPSIzIiB0aXR1bG89Ikdvb2dsZSBBZHMiKQogICAgICAgICAgICBwLm1iLTEgQXV0b21hdGl6YSBsYSBvcHRpbWl6YWNpw7NuIGRlIGFudW5jaW9zIG1lZGlhbnRlIGludGVsaWdlbmNpYSBhcnRpZmljaWFsLCBhanVzdGFuZG8gcHVqYXMgeSBtb3N0cmFuZG8gbG9zIGFudW5jaW9zIG3DoXMgcmVsZXZhbnRlcy4KICAgICAgICAgIGRpdihudW1lcm89IjQiIHRpdHVsbz0iSGVycmFtaWVudGFzIGRlIGhlYXRtYXBzIikKICAgICAgICAgICAgcC5tYi0xIFBsYXRhZm9ybWFzIGNvbW8gSG90amFyIHBlcm1pdGVuIGFuYWxpemFyIGVsIGNvbXBvcnRhbWllbnRvIGRlIGxvcyB1c3VhcmlvcyBlbiB1bmEgcMOhZ2luYSB3ZWIsIGlkZW50aWZpY2FuZG8gw6FyZWFzIGRlIGludGVyw6lzIHkgcHVudG9zIGRlIGFiYW5kb25vLgoKICAgIC5iZy1mdWxsLXdpZHRoLmJvcmRlci10b3AuYWN0aXZpZGFkLmJnLWNvbG9yLWFjdGl2aWRhZAogICAgICAucC00LnAtbWQtNQogICAgICAgICNBY3RpdmlkYWQgICAgICAgICAgICAgICAgCiAgICAgICAgICA8QWN0aXZpZGFkIDpjdWVzdGlvbmFyaW89ImN1ZXN0aW9uYXJpbyIvPgogICAgCiAgICAuYmctZnVsbC13aWR0aC5ib3JkZXItdG9wLmNvbG9yLXByaW1hcmlvCiAgICAgIC5wLTQucC1tZC01CiAgICAgICAgaDIoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIE1BVEVSSUFMIENPTVBMRU1FTlRBUklPCiAgICAgICAgLnJvdy5tYXRlcmlhbC1jb21wbGVtZW50YXJpbwogICAgICAgICAgLmNvbC0xMi5jb2wtbWQtNi5jb2wtbGctNwogICAgICAgICAgICBwIExvcyBpbnZpdGFtb3MgYSBleHBsb3JhciBlbCBtYXRlcmlhbCBjb21wbGVtZW50YXJpbyBkZSBlc3RlIGN1cnNvLCBlbiBlc3RhIHNlY2Npw7NuIGVuY29udHJhcsOhIHJlY3Vyc29zIHF1ZSBsZSBwZXJtaXRpcsOhbiBwcm9mdW5kaXphciAgeSBlbnJpcXVlY2VyIHN1IGFwcmVuZGl6YWplIGVuIGxvcyB0ZW1hcyB0cmF0YWRvcyBlbiBlc3RhIHVuaWRhZC4KCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ljb25vLXl0LnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWsxd2hKY2FNUlRBIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgQnJhbmQgSW50ZWxpZ2VudGUuICgyMDE5KS4gSW1wb3J0YW5jaWE6IFDDumJsaWNvIE9iamV0aXZvIHwgQnJhbmRpbmcgaW50ZWxpZ2VudGUKCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ljb25vLXl0LnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWdzaVR0ODh6TFNBIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgb2dhbGxvLnN0dWRpby4gKDIwMjEpLiBDb3N0b3MgZW4gUHVibGljaWRhZCBEaWdpdGFsCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby15dC5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1seEd4SS1MY2NfTSIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIEFkbsOhbGlzaXMuICgyMDI0KS4gQW7DoWxpc2lzIDI2IHwgSDJPSCEgfCBHZXN0aWN1bGFkb3JlcwogICAgICAgICAgICAgIAogICAgICAgICAgLmNvbC0xMi5jb2wtbWQtNi5jb2wtbGctMy5vZmZzZXQtbGctMQogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9tYXRlcmlhbC1jb21wbGVtZW50YXJpby5zdmcnLCBhbHQ9JycpCg=="},null]}