{"remainingRequest":"/home/runner/work/U2_Fundamentos_Publicidad/U2_Fundamentos_Publicidad/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Fundamentos_Publicidad/U2_Fundamentos_Publicidad/src/views/curso/Tema1.vue?vue&type=template&id=319cbb1a&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Fundamentos_Publicidad/U2_Fundamentos_Publicidad/src/views/curso/Tema1.vue","mtime":1736820990166},{"path":"/home/runner/work/U2_Fundamentos_Publicidad/U2_Fundamentos_Publicidad/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_Publicidad/U2_Fundamentos_Publicidad/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_Publicidad/U2_Fundamentos_Publicidad/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_Publicidad/U2_Fundamentos_Publicidad/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_Publicidad/U2_Fundamentos_Publicidad/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}